document.addEventListener("DOMContentLoaded", function () {
  const links = document.querySelectorAll(".sidebar a");
  const content = document.querySelector(".content");

  function scrollToTop(element, duration) {
    const start = element.scrollTop;
    const change = -start;
    let startTime = null;

    function animation(currentTime) {
      if (startTime === null) startTime = currentTime;
      const timeElapsed = currentTime - startTime;
      const run = ease(timeElapsed, start, change, duration);
      element.scrollTop = run;
      if (timeElapsed < duration) requestAnimationFrame(animation);
    }

    // Функция easeInOutQuad для плавности анимации
    function ease(t, b, c, d) {
      t /= d / 2;
      if (t < 1) return c / 2 * t * t + b;
      t--;
      return -c / 2 * (t * (t - 2) - 1) + b;
    }

    requestAnimationFrame(animation);
  }

  links.forEach(link => {
    link.addEventListener("click", function (e) {
      e.preventDefault();

      // Прокрутка в начало с анимацией
      scrollToTop(content, 500); // 500 - это длительность анимации в миллисекундах

      // Просто отобразим ID статьи
      const articleId = this.dataset.article;
      content.innerHTML = `<h1>Статья ${articleId}</h1>`;
    });
  });
});


document.addEventListener("DOMContentLoaded", function () {
  const newsContainer = document.querySelector(".content");
  const links = document.querySelectorAll(".sidebar a");

  const categoryTitles = {
    1: "Хакатоны",
    2: "Обзоры на курсы",
    3: "3D-моделирование",
    4: "Frontend",
    5: "Backend",
    6: "Искусственный интеллект",
    7: "Техноблог"
  };

  const articles = {
    1: [
      {
        title: "Хакатоны в России: Как айтишники находят новые возможности",
        content: `
              <p>В последние годы хакатоны стали неотъемлемой частью российской IT-индустрии. Они позволяют программистам,
              дизайнерам и аналитикам проявить себя, создать работающий прототип за короткий срок и даже получить предложение о работе.
              Такие компании, как «Яндекс», «Сбер» и «VK», регулярно организуют хакатоны, где участники решают реальные задачи бизнеса,
              а лучшие команды получают гранты и инвестиции на развитие своих проектов.</p>
              <p>Помимо крупных компаний, организаторами выступают стартапы, государственные структуры и даже университеты.
              Например, ведущие вузы, такие как МГУ и ИТМО, регулярно проводят студенческие хакатоны, помогая студентам закрепить знания и найти первых работодателей.</p>
              <p>Главная ценность хакатонов – это возможность работы в сжатые сроки над реальными кейсами. Это учит быстро адаптироваться,
              находить нестандартные решения и эффективно взаимодействовать в команде – навыки, крайне важные в современной IT-индустрии.</p>
            `
      },
      {
        title: "Самые популярные хакатоны в России",
        content: `
              <p>В России ежегодно проходит множество хакатонов, но среди них есть несколько особенно крупных:</p>
              <ul>
                <li><strong>Цифровой прорыв</strong> — всероссийский хакатон от платформы «Россия – страна возможностей», где участники решают задачи в области AI, Big Data и кибербезопасности. Отличается масштабом, призовыми фондами и поддержкой государства.</li>
                <li><strong>Hack.Moscow</strong> — международный хакатон, проводимый в Москве, где встречаются лучшие разработчики со всей страны. Организуется в сотрудничестве с крупнейшими компаниями и вузами.</li>
                <li><strong>SberCode</strong> — соревнование от Сбера, направленное на разработку решений для финансового сектора. Здесь участники создают прототипы продуктов, которые могут быть внедрены в реальную банковскую систему.</li>
                <li><strong>VK Cup</strong> — конкурс для разработчиков и аналитиков от компании «ВКонтакте». Включает несколько направлений – от алгоритмического программирования до машинного обучения.</li>
              </ul>
              <p>Эти хакатоны привлекают не только опытных айтишников, но и студентов, стремящихся войти в индустрию. Победители получают не только денежные призы, но и возможность стажировок в ведущих IT-компаниях.</p>
            `
      },
      {
        title: "Как подготовиться к хакатону и победить?",
        content: `
              <p>Чтобы успешно выступить на хакатоне, важно:</p>
              <ul>
                <li><strong>Собрать сильную команду</strong> – разнопрофильные специалисты (программисты, дизайнеры, аналитики) дополняют друг друга. Лучшие команды включают людей с разными компетенциями, что позволяет быстрее разрабатывать решения.</li>
                <li><strong>Продумать стратегию</strong> – заранее изучить тему хакатона, понять возможные задачи, проанализировать прошлые проекты победителей. Это помогает выстроить правильный подход к решению.</li>
                <li><strong>Практиковаться</strong> – перед мероприятием полезно участвовать в мини-хакатонах или прокачивать навыки на платформах типа Codeforces, LeetCode и Kaggle.</li>
                <li><strong>Правильно презентовать проект</strong> – судьи оценивают не только код, но и пользу, бизнес-модель и перспективность идеи. Важно кратко, но ёмко объяснить, почему ваш продукт стоит внимания.</li>
              </ul>
              <p>Многие победители хакатонов признаются, что ключ к успеху – это грамотное распределение времени, чёткое понимание задачи и умение адаптироваться к возникающим трудностям.</p>
            `
      },
      {
        title: "Почему компании инвестируют в хакатоны?",
        content: `
              <p>Хакатоны стали отличным инструментом для поиска талантов и инновационных идей. Компании получают готовые прототипы продуктов, свежий взгляд на свои задачи и возможность подобрать перспективных сотрудников.</p>
            <p>Например, после участия в хакатоне у «Яндекса» или «Тинькофф» многие разработчики получают предложения о работе. Это выгодно и компаниям, и участникам.</p>
            <p>Кроме того, хакатоны позволяют компаниям тестировать идеи перед полноценной разработкой. Многие успешные стартапы, такие как Miro и Prisma, начинались с прототипов, созданных на подобных мероприятиях.</p>
            <p>Для участников хакатоны – это не просто соревнование, а шанс заявить о себе. Компании следят за перспективными специалистами и готовы инвестировать в их развитие.</p>
            `
      },
      {
        title: "Перспективы хакатонов в России",
        content: `
              <p>Интерес к хакатонам в России продолжает расти. Государственные и частные организации всё чаще проводят такие мероприятия, ориентируясь не только на IT, но и на смежные отрасли – медицину, энергетику, транспорт.</p>
            <p>В будущем ожидается рост количества онлайн-хакатонов, что позволит привлекать участников из регионов и расширять границы сотрудничества. Уже сейчас крупные платформы, такие как DevPost и Kaggle, позволяют участвовать в международных соревнованиях, не выходя из дома.</p>
            <p>Кроме того, развивается система поддержки победителей хакатонов. Многие проекты, созданные на таких мероприятиях, получают гранты и проходят акселерационные программы.</p>
            <p><strong>Хакатоны – это не только соревнование, но и отличная возможность для роста, общения и карьерного старта.</strong> Если ты ещё не пробовал свои силы, самое время найти ближайший хакатон и принять участие!</p>
            `
      }
    ],
    2: [
      {
        title: "Обзор курса 'Python для начинающих' на Coursera",
        content: `
            <p>Курс 'Python для начинающих' на Coursera – отличный выбор для тех, кто хочет изучить основы программирования на Python с нуля. Он охватывает базовые концепции, такие как переменные, типы данных, циклы и функции. Преподаватели объясняют материал доступно и понятно, а практические задания помогают закрепить полученные знания.</p>
            <p><strong>Плюсы:</strong></p>
            <ul>
              <li>Подробное объяснение базовых концепций.</li>
              <li>Большое количество практических заданий.</li>
              <li>Возможность получить сертификат после завершения курса.</li>
            </ul>
            <p><strong>Минусы:</strong></p>
            <ul>
              <li>Курс может показаться слишком медленным для опытных программистов.</li>
              <li>Некоторые темы рассматриваются поверхностно.</li>
            </ul>
            <p><strong>Итог:</strong> Рекомендуется для начинающих изучать Python.</p>
            `
      },
      {
        title: "Анализ курса 'Machine Learning' от Stanford на Coursera",
        content: `
            <p>Курс 'Machine Learning' от Stanford на Coursera – один из самых популярных и авторитетных курсов по машинному обучению в интернете. Он охватывает широкий спектр тем, включая линейную регрессию, логистическую регрессию, нейронные сети и методы кластеризации. Преподаватель, Andrew Ng, объясняет материал очень четко и доступно.</p>
            <p><strong>Плюсы:</strong></p>
            <ul>
              <li>Широкий охват тем.</li>
              <li>Четкое и понятное объяснение материала.</li>
              <li>Престижный сертификат от Stanford University.</li>
            </ul>
            <p><strong>Минусы:</strong></p>
            <ul>
              <li>Требуется знание математики (линейная алгебра, математический анализ).</li>
              </ul>
            <p><strong>Итог:</strong> Рекомендуется для тех, кто имеет базовые знания математики и хочет изучить машинное обучение на продвинутом уровне.</p>
            `
      },
      {
        title: "Обзор курса 'Web Development Bootcamp' на Udemy",
        content: `
            <p>Курс 'Web Development Bootcamp' на Udemy – отличный выбор для тех, кто хочет стать full-stack веб-разработчиком. Он охватывает широкий спектр технологий, включая HTML, CSS, JavaScript, Node.js, React и MongoDB. Преподаватель, Colt Steele, объясняет материал очень интересно и доступно, а практические проекты помогают закрепить полученные знания.</p>
            <p><strong>Плюсы:</strong></p>
            <ul>
              <li>Широкий охват технологий.</li>
              <li>Интересное и доступное объяснение материала.</li>
              <li>Множество практических проектов.</li>
            </ul>
            <p><strong>Минусы:</strong></p>
            <ul>
              <li>Курс очень объемный и требует много времени.</li>
              <li>Некоторые темы рассматриваются поверхностно.</li>
            </ul>
            <p><strong>Итог:</strong> Рекомендуется для тех, кто хочет стать full-stack веб-разработчиком, но готов потратить много времени на обучение.</p>
            `
      },
      {
        title: "Рецензия на курс 'Data Science Specialization' на Coursera",
        content: `
            <p>Курс 'Data Science Specialization' на Coursera – это серия из 9 курсов, охватывающих все основные аспекты науки о данных, от статистики и машинного обучения до визуализации данных и коммуникации. Курс разработан преподавателями Johns Hopkins University и является одним из самых популярных курсов по науке о данных в интернете.</p>
            <p><strong>Плюсы:</strong></p>
            <ul>
              <li>Комплексный подход к науке о данных.</li>
              <li>Высокое качество преподавания.</li>
              <li>Возможность получить сертификат специализации.</li>
            </ul>
            <p><strong>Минусы:</strong></p>
            <ul>
              <li>Требуется знание статистики и программирования.</li>
              <li>Большая нагрузка по времени.</li>
            </ul>
            <p><strong>Итог:</strong> Рекомендуется для тех, кто имеет базовые знания статистики и программирования и хочет стать специалистом по науке о данных.</p>
            `
      },
      {
        title: "Обзор курса 'Deep Learning Specialization' на Coursera",
        content: `
            <p>Курс 'Deep Learning Specialization' на Coursera – это серия из 5 курсов, посвященных глубокому обучению. Он охватывает широкий спектр тем, включая нейронные сети, сверточные нейронные сети, рекуррентные нейронные сети и генеративные модели. Курс разработан преподавателем Andrew Ng и является одним из самых популярных курсов по глубокому обучению в интернете.</p>
            <p><strong>Плюсы:</strong></p>
            <ul>
              <li>Глубокое погружение в тему глубокого обучения.</li>
              <li>Высокое качество преподавания.</li>
              <li>Практические проекты с использованием TensorFlow и Keras.</li>
            </ul>
            <p><strong>Минусы:</strong></p>
            <ul>
              <li>Требуется знание математики и машинного обучения.</li>
              <li>Большая нагрузка по времени.</li>
            </ul>
            <p><strong>Итог:</strong> Рекомендуется для тех, кто имеет знания математики и машинного обучения и хочет стать специалистом по глубокому обучению.</p>
            `
      },
      {
        title: "Сравнение курсов 'The Complete JavaScript Course' и 'Modern JavaScript Bootcamp'",
        content: `
            <p>Оба курса 'The Complete JavaScript Course' и 'Modern JavaScript Bootcamp' – отличные варианты для изучения JavaScript. 'The Complete JavaScript Course', как правило, более структурирован и подходит для начинающих, в то время как 'Modern JavaScript Bootcamp' больше ориентирован на практику и современные техники.</p>
            <p><strong>'The Complete JavaScript Course':</strong></p>
            <ul>
              <li>Подробное объяснение основ JavaScript.</li>
              <li>Множество практических примеров.</li>
            </ul>
            <p><strong>'Modern JavaScript Bootcamp':</strong></p>
            <ul>
              <li>Современные техники и инструменты.</li>
              <li>Большое количество проектов.</li>
            </ul>
            <p><strong>Итог:</strong> Выбор зависит от ваших предпочтений и уровня подготовки. Начинающим лучше подойдет 'The Complete JavaScript Course', а тем, кто уже знаком с основами JavaScript, – 'Modern JavaScript Bootcamp'.</p>
            `
      },
      {
        title: "Стоит ли учиться на курсе 'AWS Certified Solutions Architect – Associate'?",
        content: `
            <p>Курс 'AWS Certified Solutions Architect – Associate' – отличный выбор для тех, кто хочет получить сертификат AWS и стать специалистом по облачным технологиям Amazon. Он охватывает широкий спектр тем, включая архитектуру AWS, сервисы AWS, безопасность AWS и стоимость AWS.</p>
            <p><strong>Плюсы:</strong></p>
            <ul>
              <li>Подготовка к сертификации AWS Certified Solutions Architect – Associate.</li>
              <li>Широкий охват сервисов AWS.</li>
              <li>Практические задания и примеры.</li>
            </ul>
            <p><strong>Минусы:</strong></p>
            <ul>
              <li>Требуется знание основ облачных технологий.</li>
            </ul>
            <p><strong>Итог:</strong> Рекомендуется для тех, кто имеет базовые знания облачных технологий и хочет получить сертификат AWS.</p>
            `
      }
    ],
    3: [
      {
        title: "Введение в 3D-моделирование: С чего начать?",
        content: `
            <p>3D-моделирование - это процесс создания трехмерных объектов с использованием специализированного программного обеспечения. Оно находит применение в различных областях, включая анимацию, игры, архитектуру, инженерию и дизайн.</p>
            <p><strong>Основные шаги для начинающих:</strong></p>
            <ol>
              <li><strong>Выбор программного обеспечения:</strong> Blender (бесплатный), Autodesk Maya, 3ds Max, Cinema 4D.</li>
              <li><strong>Изучение интерфейса:</strong> Освойте основные инструменты и функции выбранной программы.</li>
              <li><strong>Базовые концепции:</strong> Полигональное моделирование, NURBS, скульптурирование.</li>
              <li><strong>Практика:</strong> Начните с простых моделей (куб, сфера), постепенно переходя к более сложным объектам.</li>
            </ol>
            <p><strong>Совет:</strong> Не бойтесь экспериментировать и искать уроки в интернете. Существует огромное количество бесплатных ресурсов, которые помогут вам освоить 3D-моделирование.</p>
            `
      },
      {
        title: "Лучшие программы для 3D-моделирования: Сравнение и обзор",
        content: `
            <p>Существует множество программ для 3D-моделирования, каждая из которых имеет свои преимущества и недостатки.</p>
            <p><strong>Обзор популярных программ:</strong></p>
            <ul>
              <li><strong>Blender:</strong> Бесплатный, мощный инструмент с широкими возможностями. Отлично подходит для новичков и профессионалов.</li>
              <li><strong>Autodesk Maya:</strong> Индустриальный стандарт, используемый в кино, играх и анимации. Обладает продвинутыми функциями и инструментами.</li>
              <li><strong>3ds Max:</strong> Популярен в архитектурной визуализации и дизайне интерьеров. Интегрирован с другими продуктами Autodesk.</li>
              <li><strong>Cinema 4D:</strong> Легкий в освоении, подходит для создания анимации и motion graphics.</li>
              <li><strong>ZBrush:</strong> Специализирован на цифровой скульптуре. Идеален для создания детализированных персонажей и объектов.</li>
            </ul>
            <p><strong>Совет:</strong> Выберите программу, которая соответствует вашим потребностям и целям. Попробуйте бесплатные пробные версии, чтобы оценить функциональность каждой программы.</p>
            `
      },
      {
        title: "Как создать свою первую 3D-модель: Пошаговое руководство",
        content: `
            <p>Создание 3D-модели может показаться сложным, но с помощью пошагового руководства это становится вполне выполнимой задачей.</p>
            <p><strong>Пошаговое руководство:</strong></p>
            <ol>
              <li><strong>Выберите объект:</strong> Начните с простого объекта, например, чашки или стола.</li>
              <li><strong>Создайте базовую форму:</strong> Используйте примитивные объекты (куб, цилиндр, сфера) для создания основной формы объекта.</li>
              <li><strong>Модифицируйте форму:</strong> Используйте инструменты моделирования (extrude, bevel, loop cut) для изменения формы объекта.</li>
              <li><strong>Добавьте детали:</strong> Добавьте мелкие детали, такие как ручки, ножки, текстуры и материалы.</li>
              <li><strong>Освещение и рендеринг:</strong> Настройте освещение и выполните рендеринг, чтобы получить финальное изображение модели.</li
            </ol>
            <p><strong>Совет:</strong> Не торопитесь и будьте внимательны к деталям. Смотрите уроки и экспериментируйте с различными инструментами.</p>
            `
      },
      {
        title: "3D-графика в игровой индустрии: Создание реалистичных миров",
        content: `
            <p>3D-графика играет ключевую роль в современной игровой индустрии. Она позволяет создавать реалистичные миры, персонажей и объекты, которые погружают игрока в игровой процесс.</p>
            <p><strong>Основные этапы создания 3D-графики для игр:</strong></p>
            <ol>
              <li><strong>Моделирование:</strong> Создание 3D-моделей персонажей, объектов и окружения.</li>
              <li><strong>Текстурирование:</strong> Нанесение текстур на модели для придания им реалистичного вида.</li>
              <li><strong>Риггинг и анимация:</strong> Создание скелета и анимации для персонажей.</li>
              <li><strong>Оптимизация:</strong> Оптимизация моделей и текстур для повышения производительности игры.</li>
              <li><strong>Интеграция в игровой движок:</strong> Импорт моделей и анимаций в игровой движок (Unity, Unreal Engine).</li>
            </ol>
            <p><strong>Совет:</strong> Изучите основы анатомии и перспективы, чтобы создавать более реалистичные модели. Используйте игровые движки для тестирования и оптимизации своей графики.</p>
            `
      },
      {
        title: "Текстурирование 3D-моделей: Как добавить реалистичности?",
        content: `
            <p>Текстурирование - это процесс нанесения изображений (текстур) на 3D-модели для придания им реалистичного вида. Правильно подобранные текстуры могут значительно улучшить качество модели.</p>
            <p><strong>Основные типы текстур:</strong></p>
            <ul>
              <li><strong>Diffuse texture:</strong> Определяет цвет поверхности.</li>
              <li><strong>Normal map:</strong> Имитирует мелкие детали поверхности (неровности, царапины).</li>
              <li><strong>Specular map:</strong> Определяет блеск поверхности.</li>
              <li><strong>Roughness map:</strong> Определяет матовость поверхности.</li>
              <li><strong>Metallic map:</strong> Определяет металличность поверхности.</li>
            </ul>
            <p><strong>Совет:</strong> Используйте программы для создания текстур (Substance Painter, Quixel Mixer) для создания реалистичных и детализированных текстур. Обратите внимание на разрешение текстур - слишком высокое разрешение может снизить производительность.</p>
            `
      },
      {
        title: "Цифровая скульптура: Создание детализированных персонажей в ZBrush",
        content: `
            <p>Цифровая скульптура - это метод создания 3D-моделей, имитирующий традиционную скульптуру. ZBrush - это одна из самых популярных программ для цифровой скульптуры, позволяющая создавать невероятно детализированных персонажей и объектов.</p>
            <p><strong>Основные инструменты ZBrush:</strong></p>
            <ul>
              <li><strong>Brushes:</strong> Различные кисти для моделирования, добавления деталей и сглаживания поверхности.</li>
              <li><strong>Dynamesh:</strong> Инструмент для динамического изменения топологии модели.</li>
              <li><strong>ZRemesher:</strong> Инструмент для автоматической ретопологии.</li>
              <li><strong>Subdivision:</strong> Инструмент для увеличения детализации модели.</li>
            </ul>
            <p><strong>Совет:</strong> Начните с изучения основ интерфейса и основных инструментов. Постепенно переходите к созданию более сложных моделей. Ищите уроки и практикуйтесь в создании различных персонажей.</p>
            `
      },
      {
        title: "Будущее 3D-моделирования: Тренды и технологии",
        content: `
            <p>3D-моделирование продолжает развиваться, и появляются новые технологии и тренды, которые меняют подход к созданию трехмерных объектов.</p>
            <p><strong>Основные тренды и технологии:</strong></p>
            <ul>
              <li><strong>Procedural modeling:</strong> Создание моделей на основе алгоритмов и правил.</li>
              <li><strong>AI-powered modeling:</strong> Использование искусственного интеллекта для автоматизации процесса моделирования.</li>
              <li><strong>VR/AR modeling:</strong> Создание моделей в виртуальной и дополненной реальности.</li>
              <li><strong>3D-printing:</strong> Печать физических объектов на основе 3D-моделей.</li>
            </ul>
            <p><strong>Совет:</strong> Следите за новыми технологиями и трендами в области 3D-моделирования. Изучайте новые инструменты и методы, чтобы оставаться востребованным специалистом.</p>
            `
      }
    ],
    4: [
      {
        title: "Современные Frontend Frameworks: React, Angular, Vue",
        content: `
              <p>Frontend-разработка сегодня немыслима без использования фреймворков. Они предоставляют готовую архитектуру, инструменты и компоненты, значительно ускоряя разработку и обеспечивая масштабируемость проектов.</p>
              <p><strong>Топ-3 популярных фреймворка:</strong></p>
              <ul>
                <li><strong>React:</strong> Библиотека JavaScript, ориентированная на создание пользовательских интерфейсов.  Основана на компонентном подходе, использует Virtual DOM для повышения производительности и JSX для описания UI.</li>
                <li><strong>Angular:</strong>  Платформа для разработки клиентских приложений, основанная на TypeScript. Предоставляет полноценный фреймворк с мощным CLI, строгой структурой и Dependency Injection.</li>
                <li><strong>Vue.js:</strong> Прогрессивный JavaScript-фреймворк для создания UI.  Легкий в освоении, гибкий и легко интегрируется с другими библиотеками и проектами.</li>
              </ul>
              <p><strong>Как выбрать фреймворк?</strong></p>
              <p>Выбор фреймворка зависит от требований проекта, размера команды и опыта разработчиков.  React подходит для проектов, где важна гибкость и производительность.  Angular - для крупных enterprise-приложений со строгими требованиями к структуре.  Vue.js - отличный выбор для небольших и средних проектов, требующих быстрой разработки.</p>
              `
      },
      {
        title: "React: Компонентный подход и Virtual DOM",
        content: `
              <p>React - это JavaScript-библиотека для создания пользовательских интерфейсов. Ее ключевые особенности - компонентный подход и использование Virtual DOM.</p>
              <p><strong>Компонентный подход:</strong></p>
              <p>UI разбивается на отдельные, переиспользуемые компоненты. Каждый компонент отвечает за отображение и управление определенной частью интерфейса. Это упрощает разработку, тестирование и поддержку кода.</p>
              <p><strong>Virtual DOM:</strong></p>
              <p>React использует Virtual DOM - легковесное представление реального DOM. При изменении данных, React сравнивает Virtual DOM с предыдущей версией и обновляет только те части реального DOM, которые изменились. Это значительно повышает производительность.</p>
              `
      },
      {
        title: "Angular: TypeScript, Dependency Injection и Модульность",
        content: `
              <p>Angular - это платформа для разработки клиентских приложений, основанная на TypeScript.  Angular предоставляет мощные инструменты для создания сложных и масштабируемых приложений.</p>
              <p><strong>TypeScript:</strong></p>
              <p>Использование TypeScript обеспечивает строгую типизацию, что помогает выявлять ошибки на этапе разработки и улучшает читаемость кода.</p>
              <p><strong>Dependency Injection:</strong></p>
              <p>Dependency Injection - это паттерн проектирования, который позволяет Angular управлять зависимостями между компонентами. Это упрощает тестирование и поддержку кода.</p>
              <p><strong>Модульность:</strong></p>
              <p>Приложения Angular состоят из модулей, которые инкапсулируют отдельные части приложения. Это улучшает организацию кода и упрощает его повторное использование.</p>
              `
      },
      {
        title: "Vue.js: Прогрессивный фреймворк и легкость в освоении",
        content: `
              <p>Vue.js - это прогрессивный JavaScript-фреймворк для создания пользовательских интерфейсов. Он отличается легкостью в освоении, гибкостью и высокой производительностью.</p>
              <p><strong>Прогрессивный фреймворк:</strong></p>
              <p>Vue.js можно использовать как библиотеку для добавления интерактивности на существующие страницы, так и как полноценный фреймворк для разработки сложных приложений.</p>
              <p><strong>Легкость в освоении:</strong></p>
              <p>Vue.js имеет простой и понятный синтаксис, что делает его легким в освоении для начинающих разработчиков.</p>
              <p><strong>Гибкость:</strong></p>
              <p>Vue.js легко интегрируется с другими библиотеками и инструментами, что позволяет использовать его в различных проектах.</p>
              `
      }
    ],
    5: [
      {
        title: "Введение в Backend-разработку: архитектура, языки и инструменты",
        content: `
        <p>Backend-разработка отвечает за серверную часть веб-приложения.  Это основа, которая управляет логикой, данными и безопасностью приложения, оставаясь невидимой для пользователя.</p>
        <p><strong>Основные компоненты Backend:</strong></p>
        <ul>
          <li><strong>Сервер:</strong>  Физический или виртуальный компьютер, на котором работает Backend.</li>
          <li><strong>Язык программирования:</strong>  Определяет логику приложения (Python, Java, Node.js, Go, Ruby и др.).</li>
          <li><strong>Фреймворк:</strong>  Упрощает разработку Backend, предоставляя готовые решения (Django, Spring, Express.js, Ruby on Rails).</li>
          <li><strong>База данных:</strong>  Хранит информацию (MySQL, PostgreSQL, MongoDB, Redis).</li>
          <li><strong>API (Application Programming Interface):</strong>  Обеспечивает взаимодействие между Backend и Frontend.</li>
        </ul>
        <p><strong>Совет:</strong>  Начните с изучения основ одного из популярных языков и фреймворков.  Понимание архитектуры и принципов работы Backend – ключ к созданию надежных и масштабируемых приложений.</p>
      `
      },
      {
        title: "Выбор языка программирования для Backend: Сравнение Python, Node.js, Java и Go",
        content: `
        <p>Выбор языка программирования для Backend – критически важный шаг. Каждый язык имеет свои преимущества и недостатки, влияющие на производительность, масштабируемость и скорость разработки.</p>
        <p><strong>Сравнение популярных языков:</strong></p>
        <ul>
          <li><strong>Python (Django, Flask):</strong> Простота, читаемость, богатая экосистема. Подходит для быстрого прототипирования и сложных задач.</li>
          <li><strong>Node.js (Express.js, NestJS):</strong> JavaScript на сервере, высокая производительность для I/O операций.  Отлично подходит для realtime-приложений и API.</li>
          <li><strong>Java (Spring, Jakarta EE):</strong>  Надежность, масштабируемость, развитая инфраструктура.  Идеален для enterprise-приложений.</li>
          <li><strong>Go (Gin, Echo):</strong>  Высокая производительность, простота, конкурентность.  Подходит для микросервисов и облачных приложений.</p>
        </ul>
        <p><strong>Совет:</strong>  Учитывайте требования проекта, опыт команды и доступность библиотек при выборе языка. Не существует "лучшего" языка – есть наиболее подходящий для конкретной ситуации.</p>
      `
      },
      {
        title: "Архитектура Backend: Монолит vs микросервисы",
        content: `
        <p>Архитектура Backend определяет, как организованы компоненты приложения и как они взаимодействуют друг с другом. Два основных подхода – монолит и микросервисы.</p>
        <p><strong>Монолит:</strong></p>
        <ul>
          <li><strong>Все компоненты в одном приложении:</strong> Простота разработки и развертывания на начальном этапе.</li>
          <li><strong>Сложность масштабирования:</strong>  Требуется масштабировать все приложение целиком.</li>
          <li><strong>Сложность поддержки:</strong>  Внесение изменений может быть рискованным.</li>
        </ul>
        <p><strong>Микросервисы:</strong></p>
        <ul>
          <li><strong>Каждый компонент – отдельный сервис:</strong>  Гибкость, независимость, масштабируемость.</li>
          <li><strong>Сложность разработки и развертывания:</strong>  Требуется оркестрация сервисов.</li>
          <li><strong>Сложность поддержки:</strong>  Требуется мониторинг и управление большим количеством сервисов.</li>
        </ul>
        <p><strong>Совет:</strong>  Начните с монолита для небольших проектов и переходите к микросервисам для сложных и масштабируемых приложений.</p>
      `
      },
      {
        title: "Базы данных для Backend: SQL vs NoSQL – Что выбрать?",
        content: `
        <p>База данных – краеугольный камень любого Backend-приложения.  Выбор между SQL и NoSQL зависит от структуры данных, требований к масштабируемости и консистентности.</p>
        <p><strong>SQL (Relational Databases):</strong></p>
        <ul>
          <li><strong>Структурированные данные:</strong>  Данные хранятся в таблицах со строгой схемой.</li>
          <li><strong>ACID-транзакции:</strong>  Гарантируют консистентность данных.</li>
          <li><strong>Примеры:</strong>  MySQL, PostgreSQL, Oracle, SQL Server.</li>
        </ul>
        <p><strong>NoSQL (Non-Relational Databases):</strong></p>
        <ul>
          <li><strong>Неструктурированные или полуструктурированные данные:</strong>  Гибкость, масштабируемость, высокая производительность для чтения.</li>
          <li><strong>CAP-теорема:</strong>  Выбор между консистентностью, доступностью и устойчивостью к разделению.</li>
          <li><strong>Примеры:</strong>  MongoDB, Cassandra, Redis, Couchbase.</li>
        </ul>
        <p><strong>Совет:</strong>  SQL подходит для приложений с транзакционными требованиями и четкой структурой данных. NoSQL подходит для приложений с высокими требованиями к масштабируемости и гибкости.</p>
      `
      },
      {
        title: "REST API: Создание и документирование",
        content: `
    <p>REST (Representational State Transfer) – архитектурный стиль для создания веб-API. REST API позволяют Frontend-приложениям и другим сервисам взаимодействовать с Backend.</p>
    <p><strong>Основные принципы REST:</strong></p>
    <ul>
      <li><strong>Stateless:</strong>  Каждый запрос содержит всю необходимую информацию для обработки.</li>
      <li><strong>Client-Server:</strong>  Четкое разделение между клиентом и сервером.</li>
      <li><strong>Cacheable:</strong>  Возможность кэширования ответов.</li>
      <li><strong>Uniform Interface:</strong>  Единый интерфейс для всех ресурсов.</li>
      <li><strong>Layered System:</strong>  Многослойная архитектура.</li>
    </ul>
    <p><strong>Документирование API:</strong></p>
    <ul>
      <li><strong>Swagger/OpenAPI:</strong>  Стандарт для описания REST API.</li>
      <li><strong>Автоматическая генерация документации:</strong>  Упрощает поддержку и использование API.</li>
    </ul>
    <p><strong>Совет:</strong>  Следуйте принципам REST при создании API и используйте Swagger/OpenAPI для документирования.  Хорошо документированный API – ключ к успешному взаимодействию с другими разработчиками.</p>
  `
      },
      {
        title: "Безопасность Backend: Аутентификация, авторизация и защита от уязвимостей",
        content: `
    <p>Безопасность – критически важный аспект Backend-разработки.  Аутентификация, авторизация и защита от уязвимостей – основные компоненты безопасного приложения.</p>
    <p><strong>Аутентификация:</strong></p>
    <ul>
      <li><strong>Проверка личности пользователя:</strong>  Логин/пароль, OAuth, JWT.</li>
      <li><strong>Многофакторная аутентификация (MFA):</strong>  Повышает безопасность.</li>
    </ul>
    <p><strong>Авторизация:</strong></p>
    <ul>
      <li><strong>Определение прав доступа:</strong>  RBAC (Role-Based Access Control), ABAC (Attribute-Based Access Control).</li>
    </ul>
    <p><strong>Защита от уязвимостей:</strong></p>
    <ul>
      <li><strong>SQL-инъекции:</strong>  Использование параметризованных запросов.</li>
      <li><strong>XSS (Cross-Site Scripting):</strong>  Экранирование пользовательского ввода.</li>
      <li><strong>CSRF (Cross-Site Request Forgery):</strong>  Использование токенов защиты.</li>
    </ul>
    <p><strong>Совет:</strong>  Применяйте современные методы аутентификации и авторизации.  Регулярно проверяйте код на наличие уязвимостей.</p>
    
  `
      },
      {
        title: "Тестирование Backend: Unit-тесты, интеграционные тесты и E2E-тесты",
        content: `
    <p>Тестирование – важный этап разработки Backend.  Автоматизированное тестирование помогает выявлять ошибки и обеспечивает стабильность приложения.</p>
    <p><strong>Типы тестов:</strong></p>
    <ul>
      <li><strong>Unit-тесты:</strong>  Проверяют отдельные компоненты приложения.</li>
      <li><strong>Интеграционные тесты:</strong>  Проверяют взаимодействие между компонентами.</li>
      <li><strong>E2E-тесты (End-to-End):</strong>  Проверяют работу приложения целиком, от Frontend до Backend.</li>
    </ul>
    <p><strong>Инструменты для тестирования:</strong></p>
    <ul>
      <li><strong>Python:</strong>  unittest, pytest.</li>
      <li><strong>Node.js:</strong>  Jest, Mocha, Chai.</li>
      <li><strong>Java:</strong>  JUnit, Mockito.</li>
    </ul>
    <p><strong>Совет:</strong>  Пишите тесты для всех важных частей вашего приложения. Автоматизируйте запуск тестов при каждом изменении кода.</p>
  `
      }
    ],
    6: [
      {
        title: "Искусственный интеллект: Путеводитель для начинающих",
        content: `
    <p>Искусственный интеллект (ИИ) — это широкая область компьютерных наук, которая занимается созданием машин, способных выполнять задачи, требующие человеческого интеллекта. От беспилотных автомобилей до виртуальных помощников, ИИ быстро меняет наш мир.</p>
    <p><strong>Основные подразделы ИИ:</strong></p>
    <ul>
      <li><strong>Машинное обучение (ML):</strong> Обучение компьютеров на основе данных, без явного программирования.</li>
      <li><strong>Глубокое обучение (DL):</strong>  Использование нейронных сетей для решения сложных задач ML.</li>
      <li><strong>Обработка естественного языка (NLP):</strong>  Понимание и генерация человеческого языка.</li>
      <li><strong>Компьютерное зрение (CV):</strong>  Позволяет компьютерам "видеть" и интерпретировать изображения.</li>
      <li><strong>Робототехника:</strong>  Создание роботов, способных выполнять сложные задачи.</li>
    </ul>
    <p><strong>Совет:</strong> Начните с изучения основ машинного обучения и постепенно углубляйтесь в другие области ИИ.</p>
  `
      },
      {
        title: "Машинное обучение: Алгоритмы, примеры использования и инструменты",
        content: `
    <p>Машинное обучение (ML) — это сердце современного ИИ. Оно позволяет компьютерам учиться на данных, выявлять закономерности и делать прогнозы.</p>
    <p><strong>Основные типы алгоритмов ML:</strong></p>
    <ul>
      <li><strong>Обучение с учителем:</strong>  Линейная регрессия, Логистическая регрессия, Деревья решений, Метод опорных векторов (SVM).</li>
      <li><strong>Обучение без учителя:</strong>  Кластеризация (K-means, DBSCAN), Снижение размерности (PCA).</li>
      <li><strong>Обучение с подкреплением:</strong>  Q-learning, SARSA.</li>
    </ul>
    <p><strong>Примеры использования ML:</strong></p>
    <ul>
      <li><strong>Рекомендательные системы:</strong>  Netflix, Amazon.</li>
      <li><strong>Обнаружение мошенничества:</strong>  Банки.</li>
      <li><strong>Медицинская диагностика:</strong>  Анализ снимков.</li>
    </ul>
     <p><strong>Совет:</strong> Практикуйтесь, используя библиотеки scikit-learn (Python) или TensorFlow/PyTorch.</p>
  `
      },
      {
        title: "Глубокое обучение: Нейронные сети и революция в ИИ",
        content: `
    <p>Глубокое обучение (DL) – это подраздел машинного обучения, использующий искусственные нейронные сети для анализа данных.  DL произвело революцию в таких областях, как компьютерное зрение и обработка естественного языка.</p>
    <p><strong>Основные типы нейронных сетей:</strong></p>
    <ul>
      <li><strong>Сверточные нейронные сети (CNN):</strong>  Обработка изображений.</li>
      <li><strong>Рекуррентные нейронные сети (RNN):</strong>  Обработка последовательностей (текст, временные ряды).</li>
      <li><strong>Трансформеры:</strong>  Доминируют в NLP (BERT, GPT).</li>
    </ul>
    <p><strong>Совет:</strong> Начните изучение DL с TensorFlow или PyTorch.  Понимание архитектуры нейронных сетей - ключ к успеху.</p>
  `
      },
      {
        title: "Обработка естественного языка (NLP): Как компьютеры понимают человеческий язык",
        content: `
    <p>Обработка естественного языка (NLP) позволяет компьютерам понимать, интерпретировать и генерировать человеческий язык.  Это важнейшая область ИИ для создания чат-ботов, систем машинного перевода и анализа текста.</p>
    <p><strong>Основные задачи NLP:</strong></p>
    <ul>
      <li><strong>Анализ тональности:</strong>  Определение эмоций в тексте.</li>
      <li><strong>Машинный перевод:</strong>  Перевод с одного языка на другой.</li>
      <li><strong>Извлечение информации:</strong>  Выделение ключевых фактов из текста.</li>
      <li><strong>Генерация текста:</strong>  Создание текста на основе заданных параметров.</li>
    </ul>
    <p><strong>Совет:</strong> Изучите библиотеки NLTK, SpaCy (Python) или Hugging Face Transformers для работы с текстом.</p>
  `
      },
      {
        title: "Компьютерное зрение: Обучение машин видеть",
        content: `
    <p>Компьютерное зрение (CV) – это область ИИ, которая позволяет компьютерам "видеть" и интерпретировать изображения и видео.  CV используется в беспилотных автомобилях, системах видеонаблюдения и медицинской диагностике.</p>
    <p><strong>Основные задачи CV:</strong></p>
    <ul>
      <li><strong>Распознавание объектов:</strong>  Определение, что изображено на картинке.</li>
      <li><strong>Детекция объектов:</strong>  Поиск конкретных объектов на изображении.</li>
      <li><strong>Сегментация изображений:</strong>  Разделение изображения на области.</li>
    </ul>
    <p><strong>Совет:</strong> Изучите библиотеки OpenCV, TensorFlow или PyTorch для работы с изображениями.</p>
  `
      },
      {
        title: "Этика искусственного интеллекта: Предубеждения, ответственность и будущее",
        content: `
    <p>По мере развития ИИ вопросы этики становятся все более важными.  Необходимо учитывать предубеждения в данных, ответственность за решения ИИ и влияние ИИ на общество.</p>
    <p><strong>Основные этические вопросы:</strong></p>
    <ul>
      <li><strong>Предвзятость алгоритмов:</strong>  ИИ может воспроизводить и усиливать существующие неравенства.</li>
      <li><strong>Прозрачность:</strong>  Как принимаются решения ИИ?</li>
      <li><strong>Ответственность:</strong>  Кто несет ответственность за ошибки ИИ?</li>
      <li><strong>Конфиденциальность:</strong>  Как защитить личные данные в эпоху ИИ?</li>
      <li><strong>Автоматизация рабочих мест:</strong>  Как ИИ повлияет на рынок труда?</li>
    </ul>
    <p><strong>Совет:</strong>  При разработке ИИ учитывайте этические аспекты и стремитесь к созданию справедливых, прозрачных и ответственных систем.</p>
  `
      },
      {
        title: "Будущее искусственного интеллекта: Тренды и прогнозы",
        content: `
    <p>Искусственный интеллект продолжит развиваться и менять наш мир.  Некоторые ключевые тренды включают:</p>
    <ul>
      <li><strong>Более мощный и эффективный ИИ:</strong>  Развитие новых алгоритмов и архитектур.</li>
      <li><strong>Более широкое применение ИИ:</strong>  В здравоохранении, образовании, транспорте и других областях.</li>
      <li><strong>Более человеко-ориентированный ИИ:</strong>  Разработка ИИ, который лучше понимает и взаимодействует с людьми.</li>
      <li><strong>Этичный и ответственный ИИ:</strong>  Решение этических проблем, связанных с ИИ.</li>
      <li><strong>Автоматизация всего:</strong>  От рутинных задач до сложных процессов.</li>
      <li><strong>Персонализация на новом уровне:</strong>  ИИ адаптируется к каждому пользователю индивидуально.</li>
      <li><strong>Объединение ИИ с другими технологиями:</strong>  Например, с блокчейном, квантовыми вычислениями и робототехникой.</li>
    </ul>
    <p><strong>Совет:</strong>  Будьте готовы к изменениям, изучайте новые технологии и адаптируйтесь к новым реалиям.</p>
  `
      }
    ],
    7: [
      {
        title: "Топ-5 технологических трендов 2024 года: Что определит будущее?",
        content: `

    <p>Технологии развиваются с головокружительной скоростью. Чтобы оставаться в курсе событий и понимать, куда движется мир, важно отслеживать ключевые тренды.  Вот 5 главных технологических трендов, которые, вероятно, определят 2024 год:</p>
    <ul>
      <li><strong>Генеративный ИИ:</strong> От создания изображений и текстов до написания кода, генеративный ИИ продолжит удивлять и автоматизировать рутинные задачи.</li>
      <li><strong>Квантовые вычисления:</strong>  Хотя квантовые компьютеры еще не стали мейнстримом, они демонстрируют огромный потенциал в решении сложнейших задач в области медицины, финансов и материаловедения.</li>
      <li><strong>Web3 и Децентрализация:</strong>  Технологии блокчейна, криптовалюты и децентрализованные приложения (dApps) продолжают развиваться, предлагая новые возможности для онлайн-взаимодействия и владения данными.</li>
      <li><strong>Устойчивые технологии:</strong>  В условиях растущей обеспокоенности об изменении климата, технологии, направленные на снижение воздействия на окружающую среду, будут в центре внимания.</li>
      <li><strong>Расширенная реальность (XR):</strong>  Виртуальная (VR) и дополненная (AR) реальность становятся все более доступными и находят применение в играх, образовании, медицине и промышленности.</li>
    </ul>
    <p><strong>Совет:</strong>  Изучайте новые технологии и следите за развитием этих трендов, чтобы быть в курсе последних инноваций.</p>
  `
      },
      {
        title: "Обзор новейших смартфонов: Инновации и выбор лучшей модели",
        content: `

    <p>Рынок смартфонов переполнен новинками. Каждая модель предлагает уникальный набор функций, камер и производительности.  Как сориентироваться в этом многообразии и выбрать лучший смартфон для своих нужд?</p>
    <p><strong>Ключевые характеристики, на которые стоит обратить внимание:</strong></p>
    <ul>
      <li><strong>Процессор:</strong>  Определяет скорость работы и производительность в играх и приложениях.</li>
      <li><strong>Камера:</strong>  Разрешение, оптическая стабилизация, возможности съемки в условиях низкой освещенности.</li>
      <li><strong>Дисплей:</strong>  Тип матрицы (AMOLED, LCD), разрешение, частота обновления.</li>
      <li><strong>Аккумулятор:</strong>  Емкость и скорость зарядки.</li>
      <li><strong>Операционная система:</strong>  Android или iOS.</li>
      <li><strong>Дополнительные функции:</strong>  Поддержка 5G, NFC, защита от воды и пыли.</li>
    </ul>
    <p><strong>Совет:</strong>  Сравните характеристики разных моделей, прочитайте обзоры и выберите смартфон, который соответствует вашим потребностям и бюджету.</p>
  `
      },
      {
        title: "Безопасность в интернете: Как защитить себя от киберугроз в 2025 году",
        content: `

    <p>В современном мире, где большая часть нашей жизни проходит онлайн, защита от киберугроз становится критически важной.  Мошенники постоянно придумывают новые способы обмана и кражи данных.</p>
    <p><strong>Основные меры безопасности:</strong></p>
    <ul>
      <li><strong>Используйте надежные пароли:</strong>  Не используйте один и тот же пароль для разных аккаунтов.</li>
      <li><strong>Включите двухфакторную аутентификацию (2FA):</strong>  Дополнительный уровень защиты для ваших аккаунтов.</li>
      <li><strong>Будьте осторожны с фишинговыми письмами и ссылками:</strong>  Не переходите по подозрительным ссылкам и не вводите свои данные на непроверенных сайтах.</li>
      <li><strong>Обновляйте программное обеспечение:</strong>  Регулярные обновления закрывают уязвимости в системе.</li>
      <li><strong>Используйте антивирусное ПО:</strong>  Защищает ваш компьютер от вредоносных программ.</li>
      <li><strong>Будьте осторожны в социальных сетях:</strong>  Не делитесь личной информацией с незнакомцами.</li>
    </ul>
    <p><strong>Совет:</strong>  Повышайте свою цифровую грамотность и будьте бдительны в интернете.</p>
  `
      },
      {
        title: "Умный дом: Как сделать жизнь комфортнее с помощью технологий",
        content: `

    <p>Технологии умного дома делают нашу жизнь более комфортной, безопасной и энергоэффективной.  От управления освещением и отоплением до автоматической уборки и защиты от взлома, возможности умного дома постоянно расширяются.</p>
    <p><strong>Основные компоненты умного дома:</strong></p>
    <ul>
      <li><strong>Умные колонки:</strong>  Amazon Echo, Google Home, Apple HomePod.</li>
      <li><strong>Умные лампочки:</strong>  Philips Hue, LIFX.</li>
      <li><strong>Умные термостаты:</strong>  Nest, Ecobee.</li>
      <li><strong>Умные камеры видеонаблюдения:</strong>  Ring, Arlo.</li>
      <li><strong>Умные замки:</strong>  August, Yale.</li>
      <li><strong>Умные розетки:</strong>  TP-Link Kasa, WeMo.</li>
    </ul>
    <p><strong>Совет:</strong>  Начните с малого и постепенно добавляйте новые устройства в свой умный дом.</p>
  `
      },
      {
        title: "Виртуальная и дополненная реальность: Для развлечений, обучения и бизнеса",
        content: `

    <p>Виртуальная (VR) и дополненная (AR) реальность открывают новые горизонты для взаимодействия с цифровым миром. От игр и развлечений до обучения и бизнеса, XR-технологии находят применение в самых разных областях.</p>
    <p><strong>Примеры использования VR и AR:</strong></p>
    <ul>
      <li><strong>Игры:</strong>  Immersive gaming experiences.</li>
      <li><strong>Образование:</strong>  Виртуальные экскурсии, интерактивные уроки.</li>
      <li><strong>Медицина:</strong>  Хирургические симуляции, реабилитация.</li>
      <li><strong>Промышленность:</strong>  Проектирование, обучение, ремонт оборудования.</li>
      <li><strong>Розничная торговля:</strong>  Виртуальные примерочные, просмотр товаров в дополненной реальности.</li>
    </ul>
    <p><strong>Совет:</strong>  Исследуйте возможности VR и AR и попробуйте сами, чтобы оценить их потенциал.</p>
  `
      },
      {
        title: "Блокчейн и криптовалюты: Децентрализованные технология в 2025 году",
        content: `

    <p>Блокчейн и криптовалюты продолжают привлекать внимание, несмотря на волатильность рынка. Эти децентрализованные технологии предлагают новые возможности для финансов, управления данными и создания инновационных приложений.</p>
    <p><strong>Основные концепции:</strong></p>
    <ul>
      <li><strong>Блокчейн:</strong>  Распределенный реестр, который обеспечивает прозрачность и безопасность транзакций.</li>
      <li><strong>Криптовалюты:</strong>  Цифровые валюты, использующие блокчейн-технологию.</li>
      <li><strong>NFT (Non-Fungible Tokens):</strong>  Уникальные цифровые активы, представляющие право собственности на предметы искусства, музыку и другие объекты.</li>
      <li><strong>DeFi (Decentralized Finance):</strong>  Децентрализованные финансовые сервисы, построенные на блокчейне.</li>
    </ul>
    <p><strong>Совет:</strong>  Изучайте основы блокчейна и криптовалют, прежде чем инвестировать в эти технологии.</p>
  `
      },
      {
        title: "Искусственный интеллект: Как ИИ уже сейчас влияет на нас",
        content: `

    <p>Искусственный интеллект перестал быть научной фантастикой и прочно вошел в нашу повседневную жизнь.  Мы сталкиваемся с ИИ каждый день, даже не замечая этого.</p>
    <p><strong>Примеры использования ИИ в повседневной жизни:</strong></p>
    <ul>
      <li><strong>Голосовые помощники:</strong>  Siri, Alexa, Google Assistant.</li>
      <li><strong>Рекомендательные системы:</strong>  Netflix, Spotify, Amazon.</li>
      <li><strong>Навигационные приложения:</strong>  Google Maps, Yandex.Navigator.</li>
      <li><strong>Фильтры спама:</strong>  Gmail, Outlook.</li>
      <li><strong>Автоматические переводчики:</strong>  Google Translate, Yandex Translate.</li>
      <li><strong>Распознавание лиц:</strong>  Face ID на iPhone, системы видеонаблюдения.</li>
    </ul>
    <p><strong>Совет:</strong>  Узнайте больше о том, как ИИ используется в вашей жизни, и подумайте о том, как вы можете использовать его в своих интересах.</p>
  `
      }
    ]
  };

  links.forEach(link => {
    link.addEventListener("click", function (e) {
      e.preventDefault();

      // Плавно прокручиваем вверх
      window.scrollTo({ top: 0, behavior: 'smooth' });

      const articleId = this.getAttribute("data-article");

      // Очищаем контейнер новостей
      newsContainer.innerHTML = "";

      // Добавляем новые статьи
      if (articles[articleId]) {
        // Добавляем заголовок категории
        const categoryTitle = document.createElement("h1");
        categoryTitle.textContent = categoryTitles[articleId] || "Раздел"; // Используем предопределенный текст
        newsContainer.appendChild(categoryTitle);

        articles[articleId].forEach(article => {
          const articleElement = document.createElement("div");
          articleElement.classList.add("news");
          articleElement.innerHTML = `<h2>${article.title}</h2>${article.content}`;
          newsContainer.appendChild(articleElement);
        });
      }
    });
  });
});

document.addEventListener("DOMContentLoaded", function () {
  const newsContainer = document.querySelector(".content");
  const links = document.querySelectorAll(".sidebar a");
  const searchInput = document.getElementById("search-item");

  const categoryTitles = {
    1: "Хакатоны",
    2: "Обзоры на курсы",
    3: "3D-моделирование",
    4: "Frontend",
    5: "Backend",
    6: "Искусственный интеллект",
    7: "Техноблог"
  };

  const articles = {
    1: [
      {
        title: "Хакатоны в России: Как айтишники находят новые возможности",
        content: `
              <p>В последние годы хакатоны стали неотъемлемой частью российской IT-индустрии. Они позволяют программистам,
              дизайнерам и аналитикам проявить себя, создать работающий прототип за короткий срок и даже получить предложение о работе.
              Такие компании, как «Яндекс», «Сбер» и «VK», регулярно организуют хакатоны, где участники решают реальные задачи бизнеса,
              а лучшие команды получают гранты и инвестиции на развитие своих проектов.</p>
              <p>Помимо крупных компаний, организаторами выступают стартапы, государственные структуры и даже университеты.
              Например, ведущие вузы, такие как МГУ и ИТМО, регулярно проводят студенческие хакатоны, помогая студентам закрепить знания и найти первых работодателей.</p>
              <p>Главная ценность хакатонов – это возможность работы в сжатые сроки над реальными кейсами. Это учит быстро адаптироваться,
              находить нестандартные решения и эффективно взаимодействовать в команде – навыки, крайне важные в современной IT-индустрии.</p>
            `
      },
      {
        title: "Самые популярные хакатоны в России",
        content: `
              <p>В России ежегодно проходит множество хакатонов, но среди них есть несколько особенно крупных:</p>
              <ul>
                <li><strong>Цифровой прорыв</strong> — всероссийский хакатон от платформы «Россия – страна возможностей», где участники решают задачи в области AI, Big Data и кибербезопасности. Отличается масштабом, призовыми фондами и поддержкой государства.</li>
                <li><strong>Hack.Moscow</strong> — международный хакатон, проводимый в Москве, где встречаются лучшие разработчики со всей страны. Организуется в сотрудничестве с крупнейшими компаниями и вузами.</li>
                <li><strong>SberCode</strong> — соревнование от Сбера, направленное на разработку решений для финансового сектора. Здесь участники создают прототипы продуктов, которые могут быть внедрены в реальную банковскую систему.</li>
                <li><strong>VK Cup</strong> — конкурс для разработчиков и аналитиков от компании «ВКонтакте». Включает несколько направлений – от алгоритмического программирования до машинного обучения.</li>
              </ul>
              <p>Эти хакатоны привлекают не только опытных айтишников, но и студентов, стремящихся войти в индустрию. Победители получают не только денежные призы, но и возможность стажировок в ведущих IT-компаниях.</p>
            `
      },
      {
        title: "Как подготовиться к хакатону и победить?",
        content: `
              <p>Чтобы успешно выступить на хакатоне, важно:</p>
              <ul>
                <li><strong>Собрать сильную команду</strong> – разнопрофильные специалисты (программисты, дизайнеры, аналитики) дополняют друг друга. Лучшие команды включают людей с разными компетенциями, что позволяет быстрее разрабатывать решения.</li>
                <li><strong>Продумать стратегию</strong> – заранее изучить тему хакатона, понять возможные задачи, проанализировать прошлые проекты победителей. Это помогает выстроить правильный подход к решению.</li>
                <li><strong>Практиковаться</strong> – перед мероприятием полезно участвовать в мини-хакатонах или прокачивать навыки на платформах типа Codeforces, LeetCode и Kaggle.</li>
                <li><strong>Правильно презентовать проект</strong> – судьи оценивают не только код, но и пользу, бизнес-модель и перспективность идеи. Важно кратко, но ёмко объяснить, почему ваш продукт стоит внимания.</li>
              </ul>
              <p>Многие победители хакатонов признаются, что ключ к успеху – это грамотное распределение времени, чёткое понимание задачи и умение адаптироваться к возникающим трудностям.</p>
            `
      },
      {
        title: "Почему компании инвестируют в хакатоны?",
        content: `
              <p>Хакатоны стали отличным инструментом для поиска талантов и инновационных идей. Компании получают готовые прототипы продуктов, свежий взгляд на свои задачи и возможность подобрать перспективных сотрудников.</p>
            <p>Например, после участия в хакатоне у «Яндекса» или «Тинькофф» многие разработчики получают предложения о работе. Это выгодно и компаниям, и участникам.</p>
            <p>Кроме того, хакатоны позволяют компаниям тестировать идеи перед полноценной разработкой. Многие успешные стартапы, такие как Miro и Prisma, начинались с прототипов, созданных на подобных мероприятиях.</p>
            <p>Для участников хакатоны – это не просто соревнование, а шанс заявить о себе. Компании следят за перспективными специалистами и готовы инвестировать в их развитие.</p>
            `
      },
      {
        title: "Перспективы хакатонов в России",
        content: `
              <p>Интерес к хакатонам в России продолжает расти. Государственные и частные организации всё чаще проводят такие мероприятия, ориентируясь не только на IT, но и на смежные отрасли – медицину, энергетику, транспорт.</p>
            <p>В будущем ожидается рост количества онлайн-хакатонов, что позволит привлекать участников из регионов и расширять границы сотрудничества. Уже сейчас крупные платформы, такие как DevPost и Kaggle, позволяют участвовать в международных соревнованиях, не выходя из дома.</p>
            <p>Кроме того, развивается система поддержки победителей хакатонов. Многие проекты, созданные на таких мероприятиях, получают гранты и проходят акселерационные программы.</p>
            <p><strong>Хакатоны – это не только соревнование, но и отличная возможность для роста, общения и карьерного старта.</strong> Если ты ещё не пробовал свои силы, самое время найти ближайший хакатон и принять участие!</p>
            `
      }
    ],
    2: [
      {
        title: "Обзор курса 'Python для начинающих' на Coursera",
        content: `
            <p>Курс 'Python для начинающих' на Coursera – отличный выбор для тех, кто хочет изучить основы программирования на Python с нуля. Он охватывает базовые концепции, такие как переменные, типы данных, циклы и функции. Преподаватели объясняют материал доступно и понятно, а практические задания помогают закрепить полученные знания.</p>
            <p><strong>Плюсы:</strong></p>
            <ul>
              <li>Подробное объяснение базовых концепций.</li>
              <li>Большое количество практических заданий.</li>
              <li>Возможность получить сертификат после завершения курса.</li>
            </ul>
            <p><strong>Минусы:</strong></p>
            <ul>
              <li>Курс может показаться слишком медленным для опытных программистов.</li>
              <li>Некоторые темы рассматриваются поверхностно.</li>
            </ul>
            <p><strong>Итог:</strong> Рекомендуется для начинающих изучать Python.</p>
            `
      },
      {
        title: "Анализ курса 'Machine Learning' от Stanford на Coursera",
        content: `
            <p>Курс 'Machine Learning' от Stanford на Coursera – один из самых популярных и авторитетных курсов по машинному обучению в интернете. Он охватывает широкий спектр тем, включая линейную регрессию, логистическую регрессию, нейронные сети и методы кластеризации. Преподаватель, Andrew Ng, объясняет материал очень четко и доступно.</p>
            <p><strong>Плюсы:</strong></p>
            <ul>
              <li>Широкий охват тем.</li>
              <li>Четкое и понятное объяснение материала.</li>
              <li>Престижный сертификат от Stanford University.</li>
            </ul>
            <p><strong>Минусы:</strong></p>
            <ul>
              <li>Требуется знание математики (линейная алгебра, математический анализ).</li>
              </ul>
            <p><strong>Итог:</strong> Рекомендуется для тех, кто имеет базовые знания математики и хочет изучить машинное обучение на продвинутом уровне.</p>
            `
      },
      {
        title: "Обзор курса 'Web Development Bootcamp' на Udemy",
        content: `
            <p>Курс 'Web Development Bootcamp' на Udemy – отличный выбор для тех, кто хочет стать full-stack веб-разработчиком. Он охватывает широкий спектр технологий, включая HTML, CSS, JavaScript, Node.js, React и MongoDB. Преподаватель, Colt Steele, объясняет материал очень интересно и доступно, а практические проекты помогают закрепить полученные знания.</p>
            <p><strong>Плюсы:</strong></p>
            <ul>
              <li>Широкий охват технологий.</li>
              <li>Интересное и доступное объяснение материала.</li>
              <li>Множество практических проектов.</li>
            </ul>
            <p><strong>Минусы:</strong></p>
            <ul>
              <li>Курс очень объемный и требует много времени.</li>
              <li>Некоторые темы рассматриваются поверхностно.</li>
            </ul>
            <p><strong>Итог:</strong> Рекомендуется для тех, кто хочет стать full-stack веб-разработчиком, но готов потратить много времени на обучение.</p>
            `
      },
      {
        title: "Рецензия на курс 'Data Science Specialization' на Coursera",
        content: `
            <p>Курс 'Data Science Specialization' на Coursera – это серия из 9 курсов, охватывающих все основные аспекты науки о данных, от статистики и машинного обучения до визуализации данных и коммуникации. Курс разработан преподавателями Johns Hopkins University и является одним из самых популярных курсов по науке о данных в интернете.</p>
            <p><strong>Плюсы:</strong></p>
            <ul>
              <li>Комплексный подход к науке о данных.</li>
              <li>Высокое качество преподавания.</li>
              <li>Возможность получить сертификат специализации.</li>
            </ul>
            <p><strong>Минусы:</strong></p>
            <ul>
              <li>Требуется знание статистики и программирования.</li>
              <li>Большая нагрузка по времени.</li>
            </ul>
            <p><strong>Итог:</strong> Рекомендуется для тех, кто имеет базовые знания статистики и программирования и хочет стать специалистом по науке о данных.</p>
            `
      },
      {
        title: "Обзор курса 'Deep Learning Specialization' на Coursera",
        content: `
            <p>Курс 'Deep Learning Specialization' на Coursera – это серия из 5 курсов, посвященных глубокому обучению. Он охватывает широкий спектр тем, включая нейронные сети, сверточные нейронные сети, рекуррентные нейронные сети и генеративные модели. Курс разработан преподавателем Andrew Ng и является одним из самых популярных курсов по глубокому обучению в интернете.</p>
            <p><strong>Плюсы:</strong></p>
            <ul>
              <li>Глубокое погружение в тему глубокого обучения.</li>
              <li>Высокое качество преподавания.</li>
              <li>Практические проекты с использованием TensorFlow и Keras.</li>
            </ul>
            <p><strong>Минусы:</strong></p>
            <ul>
              <li>Требуется знание математики и машинного обучения.</li>
              <li>Большая нагрузка по времени.</li>
            </ul>
            <p><strong>Итог:</strong> Рекомендуется для тех, кто имеет знания математики и машинного обучения и хочет стать специалистом по глубокому обучению.</p>
            `
      },
      {
        title: "Сравнение курсов 'The Complete JavaScript Course' и 'Modern JavaScript Bootcamp'",
        content: `
            <p>Оба курса 'The Complete JavaScript Course' и 'Modern JavaScript Bootcamp' – отличные варианты для изучения JavaScript. 'The Complete JavaScript Course', как правило, более структурирован и подходит для начинающих, в то время как 'Modern JavaScript Bootcamp' больше ориентирован на практику и современные техники.</p>
            <p><strong>'The Complete JavaScript Course':</strong></p>
            <ul>
              <li>Подробное объяснение основ JavaScript.</li>
              <li>Множество практических примеров.</li>
            </ul>
            <p><strong>'Modern JavaScript Bootcamp':</strong></p>
            <ul>
              <li>Современные техники и инструменты.</li>
              <li>Большое количество проектов.</li>
            </ul>
            <p><strong>Итог:</strong> Выбор зависит от ваших предпочтений и уровня подготовки. Начинающим лучше подойдет 'The Complete JavaScript Course', а тем, кто уже знаком с основами JavaScript, – 'Modern JavaScript Bootcamp'.</p>
            `
      },
      {
        title: "Стоит ли учиться на курсе 'AWS Certified Solutions Architect – Associate'?",
        content: `
            <p>Курс 'AWS Certified Solutions Architect – Associate' – отличный выбор для тех, кто хочет получить сертификат AWS и стать специалистом по облачным технологиям Amazon. Он охватывает широкий спектр тем, включая архитектуру AWS, сервисы AWS, безопасность AWS и стоимость AWS.</p>
            <p><strong>Плюсы:</strong></p>
            <ul>
              <li>Подготовка к сертификации AWS Certified Solutions Architect – Associate.</li>
              <li>Широкий охват сервисов AWS.</li>
              <li>Практические задания и примеры.</li>
            </ul>
            <p><strong>Минусы:</strong></p>
            <ul>
              <li>Требуется знание основ облачных технологий.</li>
            </ul>
            <p><strong>Итог:</strong> Рекомендуется для тех, кто имеет базовые знания облачных технологий и хочет получить сертификат AWS.</p>
            `
      }
    ],
    3: [
      {
        title: "Введение в 3D-моделирование: С чего начать?",
        content: `
            <p>3D-моделирование - это процесс создания трехмерных объектов с использованием специализированного программного обеспечения. Оно находит применение в различных областях, включая анимацию, игры, архитектуру, инженерию и дизайн.</p>
            <p><strong>Основные шаги для начинающих:</strong></p>
            <ol>
              <li><strong>Выбор программного обеспечения:</strong> Blender (бесплатный), Autodesk Maya, 3ds Max, Cinema 4D.</li>
              <li><strong>Изучение интерфейса:</strong> Освойте основные инструменты и функции выбранной программы.</li>
              <li><strong>Базовые концепции:</strong> Полигональное моделирование, NURBS, скульптурирование.</li>
              <li><strong>Практика:</strong> Начните с простых моделей (куб, сфера), постепенно переходя к более сложным объектам.</li>
            </ol>
            <p><strong>Совет:</strong> Не бойтесь экспериментировать и искать уроки в интернете. Существует огромное количество бесплатных ресурсов, которые помогут вам освоить 3D-моделирование.</p>
            `
      },
      {
        title: "Лучшие программы для 3D-моделирования: Сравнение и обзор",
        content: `
            <p>Существует множество программ для 3D-моделирования, каждая из которых имеет свои преимущества и недостатки.</p>
            <p><strong>Обзор популярных программ:</strong></p>
            <ul>
              <li><strong>Blender:</strong> Бесплатный, мощный инструмент с широкими возможностями. Отлично подходит для новичков и профессионалов.</li>
              <li><strong>Autodesk Maya:</strong> Индустриальный стандарт, используемый в кино, играх и анимации. Обладает продвинутыми функциями и инструментами.</li>
              <li><strong>3ds Max:</strong> Популярен в архитектурной визуализации и дизайне интерьеров. Интегрирован с другими продуктами Autodesk.</li>
              <li><strong>Cinema 4D:</strong> Легкий в освоении, подходит для создания анимации и motion graphics.</li>
              <li><strong>ZBrush:</strong> Специализирован на цифровой скульптуре. Идеален для создания детализированных персонажей и объектов.</li>
            </ul>
            <p><strong>Совет:</strong> Выберите программу, которая соответствует вашим потребностям и целям. Попробуйте бесплатные пробные версии, чтобы оценить функциональность каждой программы.</p>
            `
      },
      {
        title: "Как создать свою первую 3D-модель: Пошаговое руководство",
        content: `
            <p>Создание 3D-модели может показаться сложным, но с помощью пошагового руководства это становится вполне выполнимой задачей.</p>
            <p><strong>Пошаговое руководство:</strong></p>
            <ol>
              <li><strong>Выберите объект:</strong> Начните с простого объекта, например, чашки или стола.</li>
              <li><strong>Создайте базовую форму:</strong> Используйте примитивные объекты (куб, цилиндр, сфера) для создания основной формы объекта.</li>
              <li><strong>Модифицируйте форму:</strong> Используйте инструменты моделирования (extrude, bevel, loop cut) для изменения формы объекта.</li>
              <li><strong>Добавьте детали:</strong> Добавьте мелкие детали, такие как ручки, ножки, текстуры и материалы.</li>
              <li><strong>Освещение и рендеринг:</strong> Настройте освещение и выполните рендеринг, чтобы получить финальное изображение модели.</li
            </ol>
            <p><strong>Совет:</strong> Не торопитесь и будьте внимательны к деталям. Смотрите уроки и экспериментируйте с различными инструментами.</p>
            `
      },
      {
        title: "3D-графика в игровой индустрии: Создание реалистичных миров",
        content: `
            <p>3D-графика играет ключевую роль в современной игровой индустрии. Она позволяет создавать реалистичные миры, персонажей и объекты, которые погружают игрока в игровой процесс.</p>
            <p><strong>Основные этапы создания 3D-графики для игр:</strong></p>
            <ol>
              <li><strong>Моделирование:</strong> Создание 3D-моделей персонажей, объектов и окружения.</li>
              <li><strong>Текстурирование:</strong> Нанесение текстур на модели для придания им реалистичного вида.</li>
              <li><strong>Риггинг и анимация:</strong> Создание скелета и анимации для персонажей.</li>
              <li><strong>Оптимизация:</strong> Оптимизация моделей и текстур для повышения производительности игры.</li>
              <li><strong>Интеграция в игровой движок:</strong> Импорт моделей и анимаций в игровой движок (Unity, Unreal Engine).</li>
            </ol>
            <p><strong>Совет:</strong> Изучите основы анатомии и перспективы, чтобы создавать более реалистичные модели. Используйте игровые движки для тестирования и оптимизации своей графики.</p>
            `
      },
      {
        title: "Текстурирование 3D-моделей: Как добавить реалистичности?",
        content: `
            <p>Текстурирование - это процесс нанесения изображений (текстур) на 3D-модели для придания им реалистичного вида. Правильно подобранные текстуры могут значительно улучшить качество модели.</p>
            <p><strong>Основные типы текстур:</strong></p>
            <ul>
              <li><strong>Diffuse texture:</strong> Определяет цвет поверхности.</li>
              <li><strong>Normal map:</strong> Имитирует мелкие детали поверхности (неровности, царапины).</li>
              <li><strong>Specular map:</strong> Определяет блеск поверхности.</li>
              <li><strong>Roughness map:</strong> Определяет матовость поверхности.</li>
              <li><strong>Metallic map:</strong> Определяет металличность поверхности.</li>
            </ul>
            <p><strong>Совет:</strong> Используйте программы для создания текстур (Substance Painter, Quixel Mixer) для создания реалистичных и детализированных текстур. Обратите внимание на разрешение текстур - слишком высокое разрешение может снизить производительность.</p>
            `
      },
      {
        title: "Цифровая скульптура: Создание детализированных персонажей в ZBrush",
        content: `
            <p>Цифровая скульптура - это метод создания 3D-моделей, имитирующий традиционную скульптуру. ZBrush - это одна из самых популярных программ для цифровой скульптуры, позволяющая создавать невероятно детализированных персонажей и объектов.</p>
            <p><strong>Основные инструменты ZBrush:</strong></p>
            <ul>
              <li><strong>Brushes:</strong> Различные кисти для моделирования, добавления деталей и сглаживания поверхности.</li>
              <li><strong>Dynamesh:</strong> Инструмент для динамического изменения топологии модели.</li>
              <li><strong>ZRemesher:</strong> Инструмент для автоматической ретопологии.</li>
              <li><strong>Subdivision:</strong> Инструмент для увеличения детализации модели.</li>
            </ul>
            <p><strong>Совет:</strong> Начните с изучения основ интерфейса и основных инструментов. Постепенно переходите к созданию более сложных моделей. Ищите уроки и практикуйтесь в создании различных персонажей.</p>
            `
      },
      {
        title: "Будущее 3D-моделирования: Тренды и технологии",
        content: `
            <p>3D-моделирование продолжает развиваться, и появляются новые технологии и тренды, которые меняют подход к созданию трехмерных объектов.</p>
            <p><strong>Основные тренды и технологии:</strong></p>
            <ul>
              <li><strong>Procedural modeling:</strong> Создание моделей на основе алгоритмов и правил.</li>
              <li><strong>AI-powered modeling:</strong> Использование искусственного интеллекта для автоматизации процесса моделирования.</li>
              <li><strong>VR/AR modeling:</strong> Создание моделей в виртуальной и дополненной реальности.</li>
              <li><strong>3D-printing:</strong> Печать физических объектов на основе 3D-моделей.</li>
            </ul>
            <p><strong>Совет:</strong> Следите за новыми технологиями и трендами в области 3D-моделирования. Изучайте новые инструменты и методы, чтобы оставаться востребованным специалистом.</p>
            `
      }
    ],
    4: [
      {
        title: "Современные Frontend Frameworks: React, Angular, Vue",
        content: `
              <p>Frontend-разработка сегодня немыслима без использования фреймворков. Они предоставляют готовую архитектуру, инструменты и компоненты, значительно ускоряя разработку и обеспечивая масштабируемость проектов.</p>
              <p><strong>Топ-3 популярных фреймворка:</strong></p>
              <ul>
                <li><strong>React:</strong> Библиотека JavaScript, ориентированная на создание пользовательских интерфейсов.  Основана на компонентном подходе, использует Virtual DOM для повышения производительности и JSX для описания UI.</li>
                <li><strong>Angular:</strong>  Платформа для разработки клиентских приложений, основанная на TypeScript. Предоставляет полноценный фреймворк с мощным CLI, строгой структурой и Dependency Injection.</li>
                <li><strong>Vue.js:</strong> Прогрессивный JavaScript-фреймворк для создания UI.  Легкий в освоении, гибкий и легко интегрируется с другими библиотеками и проектами.</li>
              </ul>
              <p><strong>Как выбрать фреймворк?</strong></p>
              <p>Выбор фреймворка зависит от требований проекта, размера команды и опыта разработчиков.  React подходит для проектов, где важна гибкость и производительность.  Angular - для крупных enterprise-приложений со строгими требованиями к структуре.  Vue.js - отличный выбор для небольших и средних проектов, требующих быстрой разработки.</p>
              `
      },
      {
        title: "React: Компонентный подход и Virtual DOM",
        content: `
              <p>React - это JavaScript-библиотека для создания пользовательских интерфейсов. Ее ключевые особенности - компонентный подход и использование Virtual DOM.</p>
              <p><strong>Компонентный подход:</strong></p>
              <p>UI разбивается на отдельные, переиспользуемые компоненты. Каждый компонент отвечает за отображение и управление определенной частью интерфейса. Это упрощает разработку, тестирование и поддержку кода.</p>
              <p><strong>Virtual DOM:</strong></p>
              <p>React использует Virtual DOM - легковесное представление реального DOM. При изменении данных, React сравнивает Virtual DOM с предыдущей версией и обновляет только те части реального DOM, которые изменились. Это значительно повышает производительность.</p>
              `
      },
      {
        title: "Angular: TypeScript, Dependency Injection и Модульность",
        content: `
              <p>Angular - это платформа для разработки клиентских приложений, основанная на TypeScript.  Angular предоставляет мощные инструменты для создания сложных и масштабируемых приложений.</p>
              <p><strong>TypeScript:</strong></p>
              <p>Использование TypeScript обеспечивает строгую типизацию, что помогает выявлять ошибки на этапе разработки и улучшает читаемость кода.</p>
              <p><strong>Dependency Injection:</strong></p>
              <p>Dependency Injection - это паттерн проектирования, который позволяет Angular управлять зависимостями между компонентами. Это упрощает тестирование и поддержку кода.</p>
              <p><strong>Модульность:</strong></p>
              <p>Приложения Angular состоят из модулей, которые инкапсулируют отдельные части приложения. Это улучшает организацию кода и упрощает его повторное использование.</p>
              `
      },
      {
        title: "Vue.js: Прогрессивный фреймворк и легкость в освоении",
        content: `
              <p>Vue.js - это прогрессивный JavaScript-фреймворк для создания пользовательских интерфейсов. Он отличается легкостью в освоении, гибкостью и высокой производительностью.</p>
              <p><strong>Прогрессивный фреймворк:</strong></p>
              <p>Vue.js можно использовать как библиотеку для добавления интерактивности на существующие страницы, так и как полноценный фреймворк для разработки сложных приложений.</p>
              <p><strong>Легкость в освоении:</strong></p>
              <p>Vue.js имеет простой и понятный синтаксис, что делает его легким в освоении для начинающих разработчиков.</p>
              <p><strong>Гибкость:</strong></p>
              <p>Vue.js легко интегрируется с другими библиотеками и инструментами, что позволяет использовать его в различных проектах.</p>
              `
      }
    ],
    5: [
      {
        title: "Введение в Backend-разработку: архитектура, языки и инструменты",
        content: `
        <p>Backend-разработка отвечает за серверную часть веб-приложения.  Это основа, которая управляет логикой, данными и безопасностью приложения, оставаясь невидимой для пользователя.</p>
        <p><strong>Основные компоненты Backend:</strong></p>
        <ul>
          <li><strong>Сервер:</strong>  Физический или виртуальный компьютер, на котором работает Backend.</li>
          <li><strong>Язык программирования:</strong>  Определяет логику приложения (Python, Java, Node.js, Go, Ruby и др.).</li>
          <li><strong>Фреймворк:</strong>  Упрощает разработку Backend, предоставляя готовые решения (Django, Spring, Express.js, Ruby on Rails).</li>
          <li><strong>База данных:</strong>  Хранит информацию (MySQL, PostgreSQL, MongoDB, Redis).</li>
          <li><strong>API (Application Programming Interface):</strong>  Обеспечивает взаимодействие между Backend и Frontend.</li>
        </ul>
        <p><strong>Совет:</strong>  Начните с изучения основ одного из популярных языков и фреймворков.  Понимание архитектуры и принципов работы Backend – ключ к созданию надежных и масштабируемых приложений.</p>
      `
      },
      {
        title: "Выбор языка программирования для Backend: Сравнение Python, Node.js, Java и Go",
        content: `
        <p>Выбор языка программирования для Backend – критически важный шаг. Каждый язык имеет свои преимущества и недостатки, влияющие на производительность, масштабируемость и скорость разработки.</p>
        <p><strong>Сравнение популярных языков:</strong></p>
        <ul>
          <li><strong>Python (Django, Flask):</strong> Простота, читаемость, богатая экосистема. Подходит для быстрого прототипирования и сложных задач.</li>
          <li><strong>Node.js (Express.js, NestJS):</strong> JavaScript на сервере, высокая производительность для I/O операций.  Отлично подходит для realtime-приложений и API.</li>
          <li><strong>Java (Spring, Jakarta EE):</strong>  Надежность, масштабируемость, развитая инфраструктура.  Идеален для enterprise-приложений.</li>
          <li><strong>Go (Gin, Echo):</strong>  Высокая производительность, простота, конкурентность.  Подходит для микросервисов и облачных приложений.</p>
        </ul>
        <p><strong>Совет:</strong>  Учитывайте требования проекта, опыт команды и доступность библиотек при выборе языка. Не существует "лучшего" языка – есть наиболее подходящий для конкретной ситуации.</p>
      `
      },
      {
        title: "Архитектура Backend: Монолит vs микросервисы",
        content: `
        <p>Архитектура Backend определяет, как организованы компоненты приложения и как они взаимодействуют друг с другом. Два основных подхода – монолит и микросервисы.</p>
        <p><strong>Монолит:</strong></p>
        <ul>
          <li><strong>Все компоненты в одном приложении:</strong> Простота разработки и развертывания на начальном этапе.</li>
          <li><strong>Сложность масштабирования:</strong>  Требуется масштабировать все приложение целиком.</li>
          <li><strong>Сложность поддержки:</strong>  Внесение изменений может быть рискованным.</li>
        </ul>
        <p><strong>Микросервисы:</strong></p>
        <ul>
          <li><strong>Каждый компонент – отдельный сервис:</strong>  Гибкость, независимость, масштабируемость.</li>
          <li><strong>Сложность разработки и развертывания:</strong>  Требуется оркестрация сервисов.</li>
          <li><strong>Сложность поддержки:</strong>  Требуется мониторинг и управление большим количеством сервисов.</li>
        </ul>
        <p><strong>Совет:</strong>  Начните с монолита для небольших проектов и переходите к микросервисам для сложных и масштабируемых приложений.</p>
      `
      },
      {
        title: "Базы данных для Backend: SQL vs NoSQL – Что выбрать?",
        content: `
        <p>База данных – краеугольный камень любого Backend-приложения.  Выбор между SQL и NoSQL зависит от структуры данных, требований к масштабируемости и консистентности.</p>
        <p><strong>SQL (Relational Databases):</strong></p>
        <ul>
          <li><strong>Структурированные данные:</strong>  Данные хранятся в таблицах со строгой схемой.</li>
          <li><strong>ACID-транзакции:</strong>  Гарантируют консистентность данных.</li>
          <li><strong>Примеры:</strong>  MySQL, PostgreSQL, Oracle, SQL Server.</li>
        </ul>
        <p><strong>NoSQL (Non-Relational Databases):</strong></p>
        <ul>
          <li><strong>Неструктурированные или полуструктурированные данные:</strong>  Гибкость, масштабируемость, высокая производительность для чтения.</li>
          <li><strong>CAP-теорема:</strong>  Выбор между консистентностью, доступностью и устойчивостью к разделению.</li>
          <li><strong>Примеры:</strong>  MongoDB, Cassandra, Redis, Couchbase.</li>
        </ul>
        <p><strong>Совет:</strong>  SQL подходит для приложений с транзакционными требованиями и четкой структурой данных. NoSQL подходит для приложений с высокими требованиями к масштабируемости и гибкости.</p>
      `
      },
      {
        title: "REST API: Создание и документирование",
        content: `
    <p>REST (Representational State Transfer) – архитектурный стиль для создания веб-API. REST API позволяют Frontend-приложениям и другим сервисам взаимодействовать с Backend.</p>
    <p><strong>Основные принципы REST:</strong></p>
    <ul>
      <li><strong>Stateless:</strong>  Каждый запрос содержит всю необходимую информацию для обработки.</li>
      <li><strong>Client-Server:</strong>  Четкое разделение между клиентом и сервером.</li>
      <li><strong>Cacheable:</strong>  Возможность кэширования ответов.</li>
      <li><strong>Uniform Interface:</strong>  Единый интерфейс для всех ресурсов.</li>
      <li><strong>Layered System:</strong>  Многослойная архитектура.</li>
    </ul>
    <p><strong>Документирование API:</strong></p>
    <ul>
      <li><strong>Swagger/OpenAPI:</strong>  Стандарт для описания REST API.</li>
      <li><strong>Автоматическая генерация документации:</strong>  Упрощает поддержку и использование API.</li>
    </ul>
    <p><strong>Совет:</strong>  Следуйте принципам REST при создании API и используйте Swagger/OpenAPI для документирования.  Хорошо документированный API – ключ к успешному взаимодействию с другими разработчиками.</p>
  `
      },
      {
        title: "Безопасность Backend: Аутентификация, авторизация и защита от уязвимостей",
        content: `
    <p>Безопасность – критически важный аспект Backend-разработки.  Аутентификация, авторизация и защита от уязвимостей – основные компоненты безопасного приложения.</p>
    <p><strong>Аутентификация:</strong></p>
    <ul>
      <li><strong>Проверка личности пользователя:</strong>  Логин/пароль, OAuth, JWT.</li>
      <li><strong>Многофакторная аутентификация (MFA):</strong>  Повышает безопасность.</li>
    </ul>
    <p><strong>Авторизация:</strong></p>
    <ul>
      <li><strong>Определение прав доступа:</strong>  RBAC (Role-Based Access Control), ABAC (Attribute-Based Access Control).</li>
    </ul>
    <p><strong>Защита от уязвимостей:</strong></p>
    <ul>
      <li><strong>SQL-инъекции:</strong>  Использование параметризованных запросов.</li>
      <li><strong>XSS (Cross-Site Scripting):</strong>  Экранирование пользовательского ввода.</li>
      <li><strong>CSRF (Cross-Site Request Forgery):</strong>  Использование токенов защиты.</li>
    </ul>
    <p><strong>Совет:</strong>  Применяйте современные методы аутентификации и авторизации.  Регулярно проверяйте код на наличие уязвимостей.</p>
    
  `
      },
      {
        title: "Тестирование Backend: Unit-тесты, интеграционные тесты и E2E-тесты",
        content: `
    <p>Тестирование – важный этап разработки Backend.  Автоматизированное тестирование помогает выявлять ошибки и обеспечивает стабильность приложения.</p>
    <p><strong>Типы тестов:</strong></p>
    <ul>
      <li><strong>Unit-тесты:</strong>  Проверяют отдельные компоненты приложения.</li>
      <li><strong>Интеграционные тесты:</strong>  Проверяют взаимодействие между компонентами.</li>
      <li><strong>E2E-тесты (End-to-End):</strong>  Проверяют работу приложения целиком, от Frontend до Backend.</li>
    </ul>
    <p><strong>Инструменты для тестирования:</strong></p>
    <ul>
      <li><strong>Python:</strong>  unittest, pytest.</li>
      <li><strong>Node.js:</strong>  Jest, Mocha, Chai.</li>
      <li><strong>Java:</strong>  JUnit, Mockito.</li>
    </ul>
    <p><strong>Совет:</strong>  Пишите тесты для всех важных частей вашего приложения. Автоматизируйте запуск тестов при каждом изменении кода.</p>
  `
      }
    ],
    6: [
      {
        title: "Искусственный интеллект: Путеводитель для начинающих",
        content: `
    <p>Искусственный интеллект (ИИ) — это широкая область компьютерных наук, которая занимается созданием машин, способных выполнять задачи, требующие человеческого интеллекта. От беспилотных автомобилей до виртуальных помощников, ИИ быстро меняет наш мир.</p>
    <p><strong>Основные подразделы ИИ:</strong></p>
    <ul>
      <li><strong>Машинное обучение (ML):</strong> Обучение компьютеров на основе данных, без явного программирования.</li>
      <li><strong>Глубокое обучение (DL):</strong>  Использование нейронных сетей для решения сложных задач ML.</li>
      <li><strong>Обработка естественного языка (NLP):</strong>  Понимание и генерация человеческого языка.</li>
      <li><strong>Компьютерное зрение (CV):</strong>  Позволяет компьютерам "видеть" и интерпретировать изображения.</li>
      <li><strong>Робототехника:</strong>  Создание роботов, способных выполнять сложные задачи.</li>
    </ul>
    <p><strong>Совет:</strong> Начните с изучения основ машинного обучения и постепенно углубляйтесь в другие области ИИ.</p>
  `
      },
      {
        title: "Машинное обучение: Алгоритмы, примеры использования и инструменты",
        content: `
    <p>Машинное обучение (ML) — это сердце современного ИИ. Оно позволяет компьютерам учиться на данных, выявлять закономерности и делать прогнозы.</p>
    <p><strong>Основные типы алгоритмов ML:</strong></p>
    <ul>
      <li><strong>Обучение с учителем:</strong>  Линейная регрессия, Логистическая регрессия, Деревья решений, Метод опорных векторов (SVM).</li>
      <li><strong>Обучение без учителя:</strong>  Кластеризация (K-means, DBSCAN), Снижение размерности (PCA).</li>
      <li><strong>Обучение с подкреплением:</strong>  Q-learning, SARSA.</li>
    </ul>
    <p><strong>Примеры использования ML:</strong></p>
    <ul>
      <li><strong>Рекомендательные системы:</strong>  Netflix, Amazon.</li>
      <li><strong>Обнаружение мошенничества:</strong>  Банки.</li>
      <li><strong>Медицинская диагностика:</strong>  Анализ снимков.</li>
    </ul>
     <p><strong>Совет:</strong> Практикуйтесь, используя библиотеки scikit-learn (Python) или TensorFlow/PyTorch.</p>
  `
      },
      {
        title: "Глубокое обучение: Нейронные сети и революция в ИИ",
        content: `
    <p>Глубокое обучение (DL) – это подраздел машинного обучения, использующий искусственные нейронные сети для анализа данных.  DL произвело революцию в таких областях, как компьютерное зрение и обработка естественного языка.</p>
    <p><strong>Основные типы нейронных сетей:</strong></p>
    <ul>
      <li><strong>Сверточные нейронные сети (CNN):</strong>  Обработка изображений.</li>
      <li><strong>Рекуррентные нейронные сети (RNN):</strong>  Обработка последовательностей (текст, временные ряды).</li>
      <li><strong>Трансформеры:</strong>  Доминируют в NLP (BERT, GPT).</li>
    </ul>
    <p><strong>Совет:</strong> Начните изучение DL с TensorFlow или PyTorch.  Понимание архитектуры нейронных сетей - ключ к успеху.</p>
  `
      },
      {
        title: "Обработка естественного языка (NLP): Как компьютеры понимают человеческий язык",
        content: `
    <p>Обработка естественного языка (NLP) позволяет компьютерам понимать, интерпретировать и генерировать человеческий язык.  Это важнейшая область ИИ для создания чат-ботов, систем машинного перевода и анализа текста.</p>
    <p><strong>Основные задачи NLP:</strong></p>
    <ul>
      <li><strong>Анализ тональности:</strong>  Определение эмоций в тексте.</li>
      <li><strong>Машинный перевод:</strong>  Перевод с одного языка на другой.</li>
      <li><strong>Извлечение информации:</strong>  Выделение ключевых фактов из текста.</li>
      <li><strong>Генерация текста:</strong>  Создание текста на основе заданных параметров.</li>
    </ul>
    <p><strong>Совет:</strong> Изучите библиотеки NLTK, SpaCy (Python) или Hugging Face Transformers для работы с текстом.</p>
  `
      },
      {
        title: "Компьютерное зрение: Обучение машин видеть",
        content: `
    <p>Компьютерное зрение (CV) – это область ИИ, которая позволяет компьютерам "видеть" и интерпретировать изображения и видео.  CV используется в беспилотных автомобилях, системах видеонаблюдения и медицинской диагностике.</p>
    <p><strong>Основные задачи CV:</strong></p>
    <ul>
      <li><strong>Распознавание объектов:</strong>  Определение, что изображено на картинке.</li>
      <li><strong>Детекция объектов:</strong>  Поиск конкретных объектов на изображении.</li>
      <li><strong>Сегментация изображений:</strong>  Разделение изображения на области.</li>
    </ul>
    <p><strong>Совет:</strong> Изучите библиотеки OpenCV, TensorFlow или PyTorch для работы с изображениями.</p>
  `
      },
      {
        title: "Этика искусственного интеллекта: Предубеждения, ответственность и будущее",
        content: `
    <p>По мере развития ИИ вопросы этики становятся все более важными.  Необходимо учитывать предубеждения в данных, ответственность за решения ИИ и влияние ИИ на общество.</p>
    <p><strong>Основные этические вопросы:</strong></p>
    <ul>
      <li><strong>Предвзятость алгоритмов:</strong>  ИИ может воспроизводить и усиливать существующие неравенства.</li>
      <li><strong>Прозрачность:</strong>  Как принимаются решения ИИ?</li>
      <li><strong>Ответственность:</strong>  Кто несет ответственность за ошибки ИИ?</li>
      <li><strong>Конфиденциальность:</strong>  Как защитить личные данные в эпоху ИИ?</li>
      <li><strong>Автоматизация рабочих мест:</strong>  Как ИИ повлияет на рынок труда?</li>
    </ul>
    <p><strong>Совет:</strong>  При разработке ИИ учитывайте этические аспекты и стремитесь к созданию справедливых, прозрачных и ответственных систем.</p>
  `
      },
      {
        title: "Будущее искусственного интеллекта: Тренды и прогнозы",
        content: `
    <p>Искусственный интеллект продолжит развиваться и менять наш мир.  Некоторые ключевые тренды включают:</p>
    <ul>
      <li><strong>Более мощный и эффективный ИИ:</strong>  Развитие новых алгоритмов и архитектур.</li>
      <li><strong>Более широкое применение ИИ:</strong>  В здравоохранении, образовании, транспорте и других областях.</li>
      <li><strong>Более человеко-ориентированный ИИ:</strong>  Разработка ИИ, который лучше понимает и взаимодействует с людьми.</li>
      <li><strong>Этичный и ответственный ИИ:</strong>  Решение этических проблем, связанных с ИИ.</li>
      <li><strong>Автоматизация всего:</strong>  От рутинных задач до сложных процессов.</li>
      <li><strong>Персонализация на новом уровне:</strong>  ИИ адаптируется к каждому пользователю индивидуально.</li>
      <li><strong>Объединение ИИ с другими технологиями:</strong>  Например, с блокчейном, квантовыми вычислениями и робототехникой.</li>
    </ul>
    <p><strong>Совет:</strong>  Будьте готовы к изменениям, изучайте новые технологии и адаптируйтесь к новым реалиям.</p>
  `
      }
    ],
    7: [
      {
        title: "Топ-5 технологических трендов 2024 года: Что определит будущее?",
        content: `

    <p>Технологии развиваются с головокружительной скоростью. Чтобы оставаться в курсе событий и понимать, куда движется мир, важно отслеживать ключевые тренды.  Вот 5 главных технологических трендов, которые, вероятно, определят 2024 год:</p>
    <ul>
      <li><strong>Генеративный ИИ:</strong> От создания изображений и текстов до написания кода, генеративный ИИ продолжит удивлять и автоматизировать рутинные задачи.</li>
      <li><strong>Квантовые вычисления:</strong>  Хотя квантовые компьютеры еще не стали мейнстримом, они демонстрируют огромный потенциал в решении сложнейших задач в области медицины, финансов и материаловедения.</li>
      <li><strong>Web3 и Децентрализация:</strong>  Технологии блокчейна, криптовалюты и децентрализованные приложения (dApps) продолжают развиваться, предлагая новые возможности для онлайн-взаимодействия и владения данными.</li>
      <li><strong>Устойчивые технологии:</strong>  В условиях растущей обеспокоенности об изменении климата, технологии, направленные на снижение воздействия на окружающую среду, будут в центре внимания.</li>
      <li><strong>Расширенная реальность (XR):</strong>  Виртуальная (VR) и дополненная (AR) реальность становятся все более доступными и находят применение в играх, образовании, медицине и промышленности.</li>
    </ul>
    <p><strong>Совет:</strong>  Изучайте новые технологии и следите за развитием этих трендов, чтобы быть в курсе последних инноваций.</p>
  `
      },
      {
        title: "Обзор новейших смартфонов: Инновации и выбор лучшей модели",
        content: `

    <p>Рынок смартфонов переполнен новинками. Каждая модель предлагает уникальный набор функций, камер и производительности.  Как сориентироваться в этом многообразии и выбрать лучший смартфон для своих нужд?</p>
    <p><strong>Ключевые характеристики, на которые стоит обратить внимание:</strong></p>
    <ul>
      <li><strong>Процессор:</strong>  Определяет скорость работы и производительность в играх и приложениях.</li>
      <li><strong>Камера:</strong>  Разрешение, оптическая стабилизация, возможности съемки в условиях низкой освещенности.</li>
      <li><strong>Дисплей:</strong>  Тип матрицы (AMOLED, LCD), разрешение, частота обновления.</li>
      <li><strong>Аккумулятор:</strong>  Емкость и скорость зарядки.</li>
      <li><strong>Операционная система:</strong>  Android или iOS.</li>
      <li><strong>Дополнительные функции:</strong>  Поддержка 5G, NFC, защита от воды и пыли.</li>
    </ul>
    <p><strong>Совет:</strong>  Сравните характеристики разных моделей, прочитайте обзоры и выберите смартфон, который соответствует вашим потребностям и бюджету.</p>
  `
      },
      {
        title: "Безопасность в интернете: Как защитить себя от киберугроз в 2025 году",
        content: `

    <p>В современном мире, где большая часть нашей жизни проходит онлайн, защита от киберугроз становится критически важной.  Мошенники постоянно придумывают новые способы обмана и кражи данных.</p>
    <p><strong>Основные меры безопасности:</strong></p>
    <ul>
      <li><strong>Используйте надежные пароли:</strong>  Не используйте один и тот же пароль для разных аккаунтов.</li>
      <li><strong>Включите двухфакторную аутентификацию (2FA):</strong>  Дополнительный уровень защиты для ваших аккаунтов.</li>
      <li><strong>Будьте осторожны с фишинговыми письмами и ссылками:</strong>  Не переходите по подозрительным ссылкам и не вводите свои данные на непроверенных сайтах.</li>
      <li><strong>Обновляйте программное обеспечение:</strong>  Регулярные обновления закрывают уязвимости в системе.</li>
      <li><strong>Используйте антивирусное ПО:</strong>  Защищает ваш компьютер от вредоносных программ.</li>
      <li><strong>Будьте осторожны в социальных сетях:</strong>  Не делитесь личной информацией с незнакомцами.</li>
    </ul>
    <p><strong>Совет:</strong>  Повышайте свою цифровую грамотность и будьте бдительны в интернете.</p>
  `
      },
      {
        title: "Умный дом: Как сделать жизнь комфортнее с помощью технологий",
        content: `

    <p>Технологии умного дома делают нашу жизнь более комфортной, безопасной и энергоэффективной.  От управления освещением и отоплением до автоматической уборки и защиты от взлома, возможности умного дома постоянно расширяются.</p>
    <p><strong>Основные компоненты умного дома:</strong></p>
    <ul>
      <li><strong>Умные колонки:</strong>  Amazon Echo, Google Home, Apple HomePod.</li>
      <li><strong>Умные лампочки:</strong>  Philips Hue, LIFX.</li>
      <li><strong>Умные термостаты:</strong>  Nest, Ecobee.</li>
      <li><strong>Умные камеры видеонаблюдения:</strong>  Ring, Arlo.</li>
      <li><strong>Умные замки:</strong>  August, Yale.</li>
      <li><strong>Умные розетки:</strong>  TP-Link Kasa, WeMo.</li>
    </ul>
    <p><strong>Совет:</strong>  Начните с малого и постепенно добавляйте новые устройства в свой умный дом.</p>
  `
      },
      {
        title: "Виртуальная и дополненная реальность: Для развлечений, обучения и бизнеса",
        content: `

    <p>Виртуальная (VR) и дополненная (AR) реальность открывают новые горизонты для взаимодействия с цифровым миром. От игр и развлечений до обучения и бизнеса, XR-технологии находят применение в самых разных областях.</p>
    <p><strong>Примеры использования VR и AR:</strong></p>
    <ul>
      <li><strong>Игры:</strong>  Immersive gaming experiences.</li>
      <li><strong>Образование:</strong>  Виртуальные экскурсии, интерактивные уроки.</li>
      <li><strong>Медицина:</strong>  Хирургические симуляции, реабилитация.</li>
      <li><strong>Промышленность:</strong>  Проектирование, обучение, ремонт оборудования.</li>
      <li><strong>Розничная торговля:</strong>  Виртуальные примерочные, просмотр товаров в дополненной реальности.</li>
    </ul>
    <p><strong>Совет:</strong>  Исследуйте возможности VR и AR и попробуйте сами, чтобы оценить их потенциал.</p>
  `
      },
      {
        title: "Блокчейн и криптовалюты: Децентрализованные технология в 2025 году",
        content: `

    <p>Блокчейн и криптовалюты продолжают привлекать внимание, несмотря на волатильность рынка. Эти децентрализованные технологии предлагают новые возможности для финансов, управления данными и создания инновационных приложений.</p>
    <p><strong>Основные концепции:</strong></p>
    <ul>
      <li><strong>Блокчейн:</strong>  Распределенный реестр, который обеспечивает прозрачность и безопасность транзакций.</li>
      <li><strong>Криптовалюты:</strong>  Цифровые валюты, использующие блокчейн-технологию.</li>
      <li><strong>NFT (Non-Fungible Tokens):</strong>  Уникальные цифровые активы, представляющие право собственности на предметы искусства, музыку и другие объекты.</li>
      <li><strong>DeFi (Decentralized Finance):</strong>  Децентрализованные финансовые сервисы, построенные на блокчейне.</li>
    </ul>
    <p><strong>Совет:</strong>  Изучайте основы блокчейна и криптовалют, прежде чем инвестировать в эти технологии.</p>
  `
      },
      {
        title: "Искусственный интеллект: Как ИИ уже сейчас влияет на нас",
        content: `

    <p>Искусственный интеллект перестал быть научной фантастикой и прочно вошел в нашу повседневную жизнь.  Мы сталкиваемся с ИИ каждый день, даже не замечая этого.</p>
    <p><strong>Примеры использования ИИ в повседневной жизни:</strong></p>
    <ul>
      <li><strong>Голосовые помощники:</strong>  Siri, Alexa, Google Assistant.</li>
      <li><strong>Рекомендательные системы:</strong>  Netflix, Spotify, Amazon.</li>
      <li><strong>Навигационные приложения:</strong>  Google Maps, Yandex.Navigator.</li>
      <li><strong>Фильтры спама:</strong>  Gmail, Outlook.</li>
      <li><strong>Автоматические переводчики:</strong>  Google Translate, Yandex Translate.</li>
      <li><strong>Распознавание лиц:</strong>  Face ID на iPhone, системы видеонаблюдения.</li>
    </ul>
    <p><strong>Совет:</strong>  Узнайте больше о том, как ИИ используется в вашей жизни, и подумайте о том, как вы можете использовать его в своих интересах.</p>
  `
      }
    ]
  };

  searchInput.addEventListener("input", function () {
    const searchTerm = this.value.toLowerCase();
    const suggestions = [];

    // Ищем соответствия в названиях статей
    for (const categoryId in articles) {
      articles[categoryId].forEach(article => {
        if (article.title.toLowerCase().includes(searchTerm)) {
          suggestions.push({ title: article.title, categoryId: categoryId });
        }
      });
    }

    // Отображаем подсказки (можно улучшить визуально)
    displaySuggestions(suggestions);
  });

  function displaySuggestions(suggestions) {
    // Очищаем предыдущие подсказки
    const existingSuggestions = document.querySelectorAll(".suggestion-item");
    existingSuggestions.forEach(item => item.remove());

    // Создаем контейнер для подсказок (если его еще нет)
    let suggestionsContainer = searchInput.parentNode.querySelector(".suggestions-container");
    if (!suggestionsContainer) {
      suggestionsContainer = document.createElement("div");
      suggestionsContainer.classList.add("suggestions-container");
      suggestionsContainer.style.maxHeight = "500px"; // Пример: 500px, можно изменить
      suggestionsContainer.style.overflowY = "auto";
      searchInput.parentNode.appendChild(suggestionsContainer);
    }

    // Создаем и добавляем новые подсказки
    suggestions.forEach(suggestion => {
      const suggestionItem = document.createElement("div");
      suggestionItem.classList.add("suggestion-item");
      suggestionItem.textContent = suggestion.title;
      suggestionItem.style.cursor = "pointer"; // Добавим стиль курсора

      // Обработчик клика на подсказку (переход к статье)
      suggestionItem.addEventListener("click", function () {
        scrollToArticle(suggestion.categoryId, suggestion.title);
        searchInput.value = "";
        const allSuggestions = document.querySelectorAll(".suggestion-item");
        allSuggestions.forEach(item => item.remove());
      });

      suggestionsContainer.appendChild(suggestionItem);
    });
  }

  function scrollToArticle(categoryId, articleTitle) {
    const articleId = articleTitle.replace(/[^a-z0-9]/gi, '-').toLowerCase();
    // Очищаем текущий контент
    newsContainer.innerHTML = "";

    // Создаем и добавляем новый контент
    const categoryTitleEl = document.createElement("h1");
    categoryTitleEl.textContent = categoryTitles[categoryId] || "Раздел";
    newsContainer.appendChild(categoryTitleEl);

    articles[categoryId].forEach(article => {
      const el = document.createElement("div");
      el.classList.add("news");
      el.setAttribute("id", article.title.replace(/[^a-z0-9]/gi, '-').toLowerCase()); // Добавляем ID
      el.innerHTML = `<h2>${article.title}</h2><p>${article.content}</p>`;  // Здесь должен быть контент
      newsContainer.appendChild(el);
    });

    const element = document.getElementById(articleId);

    if (element) {
      element.scrollIntoView({ behavior: 'smooth', block: 'start' });
    } else {
      console.warn(`Элемент с id "${articleId}" не найден`);
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }
  }

  // Закрытие подсказок при клике вне поля поиска и подсказок
  document.addEventListener("click", function (event) {
    const isClickInside = searchInput.contains(event.target) ||
      (searchInput.parentNode.querySelector(".suggestions-container") && searchInput.parentNode.querySelector(".suggestions-container").contains(event.target));

    if (!isClickInside) {
      const allSuggestions = document.querySelectorAll(".suggestion-item");
      allSuggestions.forEach(item => item.remove());
    }
  });
});